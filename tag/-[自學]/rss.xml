<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Lu Ying • Posts by &#34;-[自學]&#34; tag</title>
        <link>https://lu1hoao.github.io</link>
        <description></description>
        <language>en</language>
        <pubDate>Mon, 22 Aug 2022 16:42:28 +0800</pubDate>
        <lastBuildDate>Mon, 22 Aug 2022 16:42:28 +0800</lastBuildDate>
        <category>OS</category>
        <category>scheduling</category>
        <category>-[自學]</category>
        <category>Memory</category>
        <category>Disk</category>
        <category>Synchronization</category>
        <category>Deadlock</category>
        <category>C</category>
        <category>permutation</category>
        <category>程式新手</category>
        <category>debug</category>
        <category>VS Code</category>
        <category>combination</category>
        <category>Visual studio 2022</category>
        <category>sort</category>
        <category>WSL</category>
        <item>
            <guid isPermalink="true">https://lu1hoao.github.io/2022/08/22/Linux%20%E7%B4%80%E9%8C%84/learn/</guid>
            <title>自學筆記</title>
            <link>https://lu1hoao.github.io/2022/08/22/Linux%20%E7%B4%80%E9%8C%84/learn/</link>
            <category>-[自學]</category>
            <pubDate>Mon, 22 Aug 2022 16:42:28 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;背景概要&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景概要&#34;&gt;#&lt;/a&gt; 背景概要&lt;/h3&gt;
&lt;p&gt;在 Linux 紀錄系列的第一篇文章，放的是自己研究電腦技術、學習程式語言、做專案的心得。我一開始的本科不是資訊。高中的時候完全沒寫過程式，小時候家裡的電腦一直都是最爛的 ，到我高中還在用 XP ，所有線上遊戲都沒玩過，也不覺得這有什麼必要，畢竟我小時候對電腦一點興趣也沒有，一直是紙本書的愛好者。&lt;br /&gt;
上大學之後意外接觸到 C++ (原系的必修課) ，我很喜歡那位老師，寫作業也很有幹勁，經常寫一整天就只為了一道題目，中間甚至會忘記吃飯，再加上那時候自己的表現挺好的，所以覺得「寫程式這種事，應該可以讓我做一輩子吧！」&lt;br /&gt;
現在我已經在資訊系了，自學以來有不少心得，雖每個人念書的方式都不一樣，但自學期間受到很多前輩的幫助，或許我的一點點心得也能幫助到剛到這個領域的新手。&lt;br /&gt;
自認不是很有電腦天份的人，不是器材空，但是數學物理和英文都不差，讀原文書不會吃力也很習慣看英文文件，就是那種最最最普通的讀地名高中上來不太知道自己要幹嘛的那種人哈哈。&lt;/p&gt;
&lt;h3 id=&#34;自學初期-心態調整&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自學初期-心態調整&#34;&gt;#&lt;/a&gt; 自學初期 -- 心態調整&lt;/h3&gt;
&lt;p&gt;新手剛要寫程式時，往往不是被程式的語法難住，而是在&lt;strong&gt;安裝相關套件時遇到問題不知道該如何處理&lt;/strong&gt;，比如想要建造一個可以寫 C 的環境，就要先安裝 IDE 、編譯器，上網做功課卻發現下面留言都在吵架，有人說 VS Code 好 ，有人說直接上 vim 才是王道。但說的這些人都已經很厲害了，自己有一套見解和習慣，不是一般新手能明白的。我剛開始寫程式時就算別人跟我說 A 牌的 IDE 很難用我也感受不出難用在哪裡，所以我的建議是選好自己的 IDE 之後，上網找教學影片一步一步跟著安裝， 如果還是無法接受自己不知原理卻要跟著一個口令一個動作，那就把這些教學當作是信仰，只要想著是信仰心裡就會比較好過一點，就像我們不會深究為甚麼媽祖會保佑我們、他的法力從何而來一樣。&lt;/p&gt;
&lt;h3 id=&#34;自學中期-書比網站更好&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自學中期-書比網站更好&#34;&gt;#&lt;/a&gt; 自學中期 -- 書比網站更好&lt;/h3&gt;
&lt;p&gt;原系的程式設計課是 C++、C 語言混合上，比較偏應用導向，因為想學得更所以我跑去資訊系修他們的程式設計，教得是 C，不修還好，一修發現負擔好重 (廢話人家是資訊系耶)，寫完作業題目、熟讀 PPT 是絕對無法拿高分的，分奴如我開始狂刷題練習，我一開始是用 zero judge ，有多瘋狂呢？大概三週刷 100 題，一些特選上來的資訊系朋友都說沒看過我這麼瘋的人。刷題過程中會碰到很多需要資料結構、演算法概念的解題技巧，一開始我也是上網查，但總覺得很沒效率，加上內容農場太多，所以後來就買了資料結構、演算法的專書，一章一章慢慢讀邊讀邊打成筆記，然後再去寫題目。&lt;br /&gt;
這個過程中我深刻感受到 &lt;strong&gt;書比網站好多了&lt;/strong&gt; ，如果是單純 Google ，能不能正確打出關鍵字都是問題了 (有些特殊演算法會有特殊名字) 加上內容農場實在太多，很容易變成在抄程式碼。書通常會有比較完整的解說，內容也比較值得信任。&lt;/p&gt;
&lt;h3 id=&#34;自學中期-讀懂錯誤訊息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自學中期-讀懂錯誤訊息&#34;&gt;#&lt;/a&gt; 自學中期 -- 讀懂錯誤訊息&lt;/h3&gt;
&lt;p&gt;很多人在寫程式時會碰到 terminal 報錯的情況，報錯時只要把報錯訊息拿到 stack overflow 搜尋就會有很多答案，但許多人可能因為太懼怕英文或太懼怕終端機畫面 (？) 找不到真正的錯誤訊息，造成複製錯誤永遠找不到答案，這個就需要一點技巧，通常錯誤訊息只會有一兩行，會出現在最後，用一般高中的英文能力應該可以讀懂。把錯誤訊息拿去 Google 後，我通常會紀錄一下這次發生錯誤的原因、所出現的錯誤訊息、解決方法，幫助自己不再犯同樣的錯誤，也不要想著反正永遠都能靠 Google ，多學一點總是沒有壞事的。&lt;/p&gt;
&lt;h3 id=&#34;自學末期-思考的停損點&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自學末期-思考的停損點&#34;&gt;#&lt;/a&gt; 自學末期 -- 思考的停損點&lt;/h3&gt;
&lt;p&gt;很多熱愛寫程式的人都會一股腦地鑽進電腦懷抱，debug de 半天，沒想出答案之前不想離開電腦椅，熱情當然是很重要，但是適度地離開原本的環境，出去散步、吃飯洗澡，對健康比較好，大腦也容易在放鬆期間找到新的思考切入點，有時候會有意外的收穫。還有如果你的自學是有明確目的性的，比如：我就是想寫出一個網站！那就不需要在其他地方太鑽牛角尖，把時間花在刀口上是比較好的，畢竟學海無崖，不可能甚麼都懂。我通常會設定一個明確停損點，如果想了一個小時我還是想不出來，那就休息一下、轉換心情找找其他資料甚至直接放棄也沒關係。&lt;/p&gt;
&lt;h3 id=&#34;自學番外-人格的完整性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自學番外-人格的完整性&#34;&gt;#&lt;/a&gt; 自學番外 -- 人格的完整性&lt;/h3&gt;
&lt;p&gt;這一部分比較算是個人見解，我覺得多去接觸其他領域 (不一定是深入學習，可能只是和該領域的專業人士聊聊該領域的專業內容)、培養除了電腦之外的多元興趣 (但不是單純吃喝睡這種點到為止的膚淺的娛樂，如果是鑽研美食就另當別論) 對人格是比較好的，有些人的興趣專長都是電腦，只要他開心我也是沒意見，但電腦呈現資訊的方式只是世間眾多表達方式的一種，電腦用數字表示顏色，但顏色也能用情感、記憶去說明。人在學習新事物時，往往傾向用原本已知的概念去理解未知的原理，所以如果我們能夠聯想的領域越多元，就越能夠讓知識互相闡述，在引進新的想法或想打造新的突破時也能提供思考方向。&lt;/p&gt;
&lt;h3 id=&#34;結語&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#結語&#34;&gt;#&lt;/a&gt; 結語&lt;/h3&gt;
&lt;p&gt;以上自學心得只是個人淺見，每個人都有適合的學習方式，我身邊也有很多從小就很習慣自學、技術性極強的人。我是屬於不太有天分但肯努力的人，要找到自己喜歡做的事本來就不是一件容易的事，但還是希望對資訊領域有熱忱的人能少走一點冤枉路&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
