{
    "version": "https://jsonfeed.org/version/1",
    "title": "Lu Ying's home • All posts by \"combination\" tag",
    "description": "生活紀錄",
    "home_page_url": "https://lu1hOAO.github.io",
    "items": [
        {
            "id": "https://lu1hoao.github.io/2022/05/14/%E4%B8%80%E9%BB%9E%E9%BB%9E%E6%BC%94%E7%AE%97%E6%B3%95/combination/",
            "url": "https://lu1hoao.github.io/2022/05/14/%E4%B8%80%E9%BB%9E%E9%BB%9E%E6%BC%94%E7%AE%97%E6%B3%95/combination/",
            "title": "C 語言組合 (combination)",
            "date_published": "2022-05-14T08:42:28.000Z",
            "content_html": "<h3 id=\"概要\"><a class=\"anchor\" href=\"#概要\">#</a> 概要</h3>\n<p>本篇文章講述以 C 語言實作排列組合中的「組合」，輸出從 m 個數當中取 n 個數的所有取法，在組合當中核心概念是遞迴，之後也會用專門文章來介紹遞迴的概念與其他應用</p>\n<h3 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h3>\n<p>在做遞迴相關題目時，個人覺得有幾件事非常重要</p>\n<ol>\n<li><strong>設定 return 條件</strong><br />\n遞迴一定要 return ，不然會永無止盡的呼叫下去最後 stackoverflow ， 如果沒設定 return 條件編譯器也會提醒我們。<br />\n那麼在 m 個數中取出 n 個數，這個問題的 return 條件是甚麼呢？ return 條件的意思就是：到了這個條件就不需要再遞迴下去了！已經夠了，所以在組合問題中的 return 條件就是<strong>已經選了 n 個數的時候</strong>，已經挑好 n 個數了現在只需要印出來就好，不用再遞迴。</li>\n<li><strong>判斷 return 之後需不需要修改狀態</strong><br />\n函數 return 後會回到呼叫他的函數，並從呼叫後的下一行開始執行，有時候我們會在這裡修改某一些數的值，讓函數再次遞回達到新的條件，在組合中就會遇到這樣的情況，通常是在做<strong>要或不要</strong>這種問題時會發生，對某一個元素而言，選或不選都要考慮，那就要確保這兩種情況都會發生，假設第一次是選， return 之後就要把值改成不選</li>\n<li><strong>思索非遞迴解法</strong><br />\n第三步比較困難， 但理論上所有的遞迴解法都可以展開變成非遞迴解法，做這一步主要是進一步去思考遞迴真的有比較好嗎？會不會有更好的做法？畢竟答案不是對就好，還要快、省空間</li>\n</ol>\n<h3 id=\"圖說\"><a class=\"anchor\" href=\"#圖說\">#</a> 圖說</h3>\n<p>假設我們要從這 9 個數中取出 4 個數，設定一個變數叫作 count，表示選了幾個數，最初 count=0</p>\n<p><img data-src=\"https://i.imgur.com/S21TtRO.png\" alt=\"\" /></p>\n<p>指標從第一個數出發，要選嗎？要！因為這時 count=0，0&lt;4，還沒達到 return 條件所以選，然後 count 變成 1</p>\n<p><img data-src=\"https://i.imgur.com/WEh7PjD.png\" alt=\"\" /></p>\n<p>接著把指標移到第二個數，要選嗎？要 (1&lt;4) 選了之後 count=2</p>\n<p><img data-src=\"https://i.imgur.com/0aRz215.png\" alt=\"\" /></p>\n<p>指標移到第三個數，要選嗎？要 (2&lt;4) 選了之後 count=3</p>\n<p><img data-src=\"https://i.imgur.com/Gt59us8.png\" alt=\"\" /></p>\n<p>指標移到第四個數，要選嗎？要 (3&lt;4) 選了之後 count=4</p>\n<p><img data-src=\"https://i.imgur.com/r9tmFyW.png\" alt=\"\" /></p>\n<p>指標移到第 5 個數，發現 count 已經等於 4 了，所以印出 5 9 3 1</p>\n<p><img data-src=\"https://i.imgur.com/Oi1PaTF.png\" alt=\"\" /></p>\n<p>然後 return ，return 後把 1 改成不選，count-1 (變成 3 因為 1 不選)</p>\n<p><img data-src=\"https://i.imgur.com/WQyrIXc.png\" alt=\"\" /></p>\n<p>把指標移到 2 要選嗎？要 ，因為 (3&lt;4)，選完之後 count 變成 4</p>\n<p><img data-src=\"https://i.imgur.com/Inud9Ba.png\" alt=\"\" /></p>\n<p>接著把指標移到 8 ，發現 count=4 ，所以印出 5 9 3 2</p>\n<p><img data-src=\"https://i.imgur.com/bQ9ns3s.png\" alt=\"\" /></p>\n<p>然後 return ，把 2 改成不選，count - 1</p>\n<p><img data-src=\"https://i.imgur.com/vPGZKjh.png\" alt=\"\" /></p>\n<p>如此反覆最後就會得到所有組合。<br />\n把步驟條列話可以得到以下：</p>\n<ol>\n<li>把輸入的數字存成陣列</li>\n<li>指標由左到右移動，若 count &lt;4，就把該數字的布林值設為 1 (表示選擇)，count 也加 1</li>\n<li>當 count=4 時，輸出所選數字，並 return 把最後一個選擇的數字移除</li>\n</ol>\n<p>接著來看程式碼</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">n</span> <span class=\"token expression\"><span class=\"token number\">4</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdbool.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">com</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> base<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>bool is_select<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">com</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">==</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>is_select<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>base<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        is_select<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">com</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        is_select<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在這裡比較需要注意的是<strong>每次遞迴都只能考慮該 index 之後的狀況，前面的狀況要等到 return 才能修改</strong>。index 表示指標，現在從哪裡開始作遞迴的意思， count 表示選了幾個數，初值為 0 ，m 和 n 都是可以自由修改的變數，表示我們要從 m 個數中取出 n 個數，bool 陣列則是在記錄這個數要選或不選，初值大家都為 0 表示尚未選擇</p>\n<h3 id=\"小結\"><a class=\"anchor\" href=\"#小結\">#</a> 小結</h3>\n<p>組合是生活中很常遇到的問題，數學上也有很多很複雜的組合題目，不光是選出特定個數而已，選出的的這些元素還要達成其他條件，比如不同色啊、重量超過多少呀等等的，這裡示範的程式碼只是最簡單的情況，但上述情況都脫離不了遞迴的思考觀念，有些更進階題目可以使用動態規劃 (Dynamic programming)，把問題分成幾個子集合，對每個子集合選出最佳解之後就找到整體的最佳解了 (前提是要確保題目本身符合最佳子結構的條件啦)，之後在遞迴的文章中也會說明</p>\n<h3 id=\"非遞迴解法\"><a class=\"anchor\" href=\"#非遞迴解法\">#</a> 非遞迴解法</h3>\n<p>呼應前面提到作遞迴解法時也可以思考是否存在非遞迴解法，比如這題就可以用 4 個迴圈實作出非遞迴解法喔，有興趣可以試試看！</p>\n",
            "tags": [
                "combination",
                "C"
            ]
        }
    ]
}