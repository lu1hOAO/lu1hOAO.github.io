{
    "version": "https://jsonfeed.org/version/1",
    "title": "Lu Ying • All posts by \"c\" tag",
    "description": "",
    "home_page_url": "https://lu1hoao.github.io",
    "items": [
        {
            "id": "https://lu1hoao.github.io/2022/05/23/%E4%B8%80%E9%BB%9E%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B/stack/",
            "url": "https://lu1hoao.github.io/2022/05/23/%E4%B8%80%E9%BB%9E%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B/stack/",
            "title": "堆疊與佇列 (stack&queue) (上)",
            "date_published": "2022-05-23T08:42:28.000Z",
            "content_html": "<h3 id=\"概要\"><a class=\"anchor\" href=\"#概要\">#</a> 概要</h3>\n<p>本篇文主要介紹堆疊 (stack)、佇列 (queue) 這種資料型態的特質，在 C 語言中實作 stack 和 queue 是使用 array 這種 type，但不是把它當成 array 喔！資料結構的精髓在於把資訊換一個角度解讀，用不同角度解讀就呈現出不同資料結構的特質，這些特質可以幫助我們解決現實生活中的問題或是提升電腦性能，下篇也會講述一些 stack 的實例，像是後序運算、火車交換 ( switching network)</p>\n<h3 id=\"堆疊-stack-的基本性質\"><a class=\"anchor\" href=\"#堆疊-stack-的基本性質\">#</a> 堆疊 (Stack) 的基本性質</h3>\n<p>stack 的中文叫做堆疊，就像我們在堆衣服或堆書，把東西堆到最上面，拿取的時候也只能從最上面拿，因此會造成後進先出的狀況 ( <strong>F</strong>irst <strong>I</strong>n <strong>F</strong>irst <strong>O</strong>ut )，以下是 stack 的性質</p>\n<ul>\n<li>先進後出</li>\n<li>須有一個指標表示最上層的物件</li>\n<li>整個 stack 是有容量限制的</li>\n</ul>\n<p>我們來用 C 語言實作 stack</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX</span> <span class=\"token expression\"><span class=\"token number\">10</span></span><span class=\"token comment\">//stack 有 10 個空間</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> stack <span class=\"token punctuation\">[</span>MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> top<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token comment\">//top 初始值為 - 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>top<span class=\"token operator\">>=</span>MAX<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stack is full!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//stack 已滿</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>stack<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>top<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stack is empty!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item %d is deleted\\n\"</span><span class=\"token punctuation\">,</span>stack<span class=\"token punctuation\">[</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面這段程式碼，加入物品前要先把 top+1，再把東西放進去，刪除物品的時候則是先把物品 pop 出來，再把 top-1 ，因為 top 必須永遠指到最上面的物品<br />\n在做 stack 運用時也要特別注意 pop 和 push 的時機，舉例來說，把 1 2 3 這三個數字依序放到 stack ，可以一次放進三個數字後再 POP 三個，如此就會得到 3 2 1 ，但也可以先放進 1 2 然後 POP ，形成 2 1 ，再把 3 push 到 stack，再 pop ，我們可以用下面圖片來理解</p>\n<p><img data-src=\"https://i.imgur.com/JGW7WCM.png\" alt=\"\" /></p>\n<p>以上得到 3 2 1</p>\n<p><img data-src=\"https://i.imgur.com/zlDWUlm.png\" alt=\"\" /></p>\n<p>以上得到 2 1 3</p>\n<h3 id=\"佇列-queue-的基本性質\"><a class=\"anchor\" href=\"#佇列-queue-的基本性質\">#</a> 佇列 (queue) 的基本性質</h3>\n<p>stack 是只有一個開口，出入都走同一個門，所以只需要一個指標 top 表示最上層的物件，queue 則有兩端一端稱為 front (前)，一端稱為 rear (後)，放東西時從 rear 端，拿東西時則從 front 端，所以會有<strong>先進先出</strong>的狀況，以下是 queue 的性質</p>\n<ul>\n<li>先進先出 (First in First Out)</li>\n<li>需有兩個指標表示前端與後端</li>\n<li>queue 有容量限制</li>\n<li>又可以產生環狀佇列、雙向佇列、優先權佇列等變形<br />\n我們用 C 語言實作 queue</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX</span> <span class=\"token expression\"><span class=\"token number\">20</span></span><span class=\"token comment\">//queue 有 20 個空間</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> queue<span class=\"token punctuation\">[</span>MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> rear<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>front<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//rear 初始值為 -1，front 初始值為 0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rear<span class=\"token operator\">>=</span>MAX<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"queue is full!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>queue<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>rear<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>front<span class=\"token operator\">></span>rear<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO item,queue is empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>queue<span class=\"token punctuation\">[</span>front<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>front 會永遠指向 queue 中第一個物件，而 rear 則會永遠指向 queue 中最後一個物件，所以當  front &gt; rear 時表示 queue 已經空了。不過這樣的 queue 卻會造成一個現象，位置不會被重複利用，前面的物品即使已經清掉位置空出來了，系統卻不會察覺，造成空間的浪費。為了改善這個狀況於是有了環狀 queue。<br />\n環狀佇列在一開始時，把 front 和 rear 支出值均設為 MAX-1，一樣從 rear 端輸入 (從 0 開始)，從 front 提取 (從 0 開始)，比較特別的是在環狀陣列中始終有一個空位置 (空位置會移動)。我們來看看環狀柱列的程式碼</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX</span> <span class=\"token expression\"><span class=\"token number\">20</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> circle_queue<span class=\"token punctuation\">[</span>MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> rear<span class=\"token operator\">=</span><span class=\"token number\">19</span><span class=\"token punctuation\">;</span>front<span class=\"token operator\">=</span><span class=\"token number\">19</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> rear<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>rear<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>MAX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rear<span class=\"token operator\">==</span>front<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rear<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     rear<span class=\"token operator\">=</span>MAX<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     rear<span class=\"token operator\">=</span>rear<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"queue is full!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>circle_queue<span class=\"token punctuation\">[</span>rear<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>front<span class=\"token operator\">==</span>rear<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"queue is empty!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  front<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>front<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>MAX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>ciricle_queue<span class=\"token punctuation\">[</span>front<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>這裡值得注意的是在環狀佇列中，front 指的是上一個被刪除的物件位置，<strong>而非即將刪除的物件位置</strong>，換句話說 front 指到的那格一定是空的，也就是前面所說環狀佇列中必定會有一個空位置</p>\n<p>我們可以用下方流程圖來理解<br />\n<img data-src=\"https://i.imgur.com/W5rSHak.png\" alt=\"\" /></p>\n<p>f 表示 front ，r 表示 rear ，黑色數字表示 index，紅色數字表示該個中存放的物件。</p>\n<p><img data-src=\"https://i.imgur.com/4Svpy5r.png\" alt=\"\" /></p>\n<p>特別注意 f 所指到區域必定是空的</p>\n<h3 id=\"後序運算\"><a class=\"anchor\" href=\"#後序運算\">#</a> 後序運算</h3>\n<p>我們一般在寫數學式的時候，是使用中序表示法，意思就是 operator 在 operand 中間，(符號在數字中間)，但對電腦而言中序運算式其實不太好處理，因為會有很多括號，所以在編譯階段會把中序運算式轉為後序表示，我們以下方例子說明</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>∗</mo><mn>4</mn><mo>+</mo><mn>6</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">((1+3)*4+6)/2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">6</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span></span></p>\n<p>轉為後序表示會如下</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>13</mn><mo>+</mo><mn>4</mn><mo>∗</mo><mn>6</mn><mo>+</mo><mn>2</mn><mi mathvariant=\"normal\">/</mi></mrow><annotation encoding=\"application/x-tex\">1 3 + 4 * 6 + 2 /\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord\">/</span></span></span></span></span></p>\n<p>電腦在處理時會這樣</p>\n<ul>\n<li>看到 1、3</li>\n<li>看到 +</li>\n<li>把 1、3 相加 得到 4</li>\n<li>看到 4</li>\n<li>看到 *</li>\n<li>把第一階段得到的 4 和 4 乘起來 得到 16</li>\n<li>看到 6</li>\n<li>看到 +</li>\n<li>把 16 和 6 相加得到 22</li>\n<li>看到 2</li>\n<li>看到 /</li>\n<li>把 22/2 得到 11</li>\n</ul>\n<p>這樣做可以避免括號，也不用管什麼先乘除後加減，只要由左往又算就好了<br />\n那電腦式怎麼把中序運算是變成後序的呢？利用 stack<br />\n 先把常見的運算元做以下順序標示</p>\n<table>\n<thead>\n<tr>\n<th>符號</th>\n<th>in-stack priority</th>\n<th>in-coming prioority</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>)</td>\n<td>MAX</td>\n<td>MIN</td>\n</tr>\n<tr>\n<td>+,-,! (正、負)</td>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>%,*,/</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>+,-  (加、減)</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>(</td>\n<td>MIN</td>\n<td>MAX</td>\n</tr>\n</tbody>\n</table>\n<p>當輸入時運算子 (數字或變數) 時，就不須猶豫直接輸出即可，但當輸入是運算元，就必須考慮 stack 內部的情況，<strong>若此時在堆疊中的 in-stack-priority 高於即將進來的那一個，那麼一律輸出 stack 內的運算元</strong>，再把即將進入的運算子放到 stack 否則把這個運算子放到 stack 中，在輸出時也要注意 () 是不會被列印出來的 (要 pop 不用列印)，從上表也可以觀察到一個有趣的現象，除了 ( ) 的 in-stack priority 和 in-coming priority 不一樣以外，其他的運算元的兩個 priority 都一樣。<br />\n解答這個問題之前我們先來思考什麼樣的運算元最容易被輸出：<strong>in stack priority 越高的運算元待在 stack 內的時間越短，越容易被輸出</strong><br />\n照理來說 ) 出現時表示有一個 (在 stack 內，而這兩個 () 的所有運算元應該都要輸出，為了達成這個目的，) 的 in-coming priority 應該要很低，但輸出 ( 到 ) 括號之間的所有運算元後，) 還是被放入 stack 了，他要趕快離開 stack 才能和 ( 共同完成運算，所以他的 in stack priority 才會那麼高，幾乎是一被放入 stack 又立刻出來，因為他趕快去找他的好夥伴 (<br />\n對 ( 來說也一樣，他從被放入 stack 的那一刻起就開始痴痴等待) 的來到，在還沒看到 ) 之前他絕不離開，所以他的 in stack priority 很低，而對每一個 ( 而言，他應該都會被放入 stack 最底部，因為它代表一個運算段落的開端，所以他的 in coming priority 才那麼高</p>\n<h3 id=\"小結\"><a class=\"anchor\" href=\"#小結\">#</a> 小結</h3>\n<p>寫到這裡字數也很多了，所以剩下的就留到下篇來寫，下篇會提供後序演算法的程式碼，以及 stack 的另一個重大運用 (火車交換)，祝大家閱讀愉快</p>\n",
            "tags": [
                "C"
            ]
        },
        {
            "id": "https://lu1hoao.github.io/2022/05/20/%E4%B8%80%E9%BB%9E%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B/array-2/",
            "url": "https://lu1hoao.github.io/2022/05/20/%E4%B8%80%E9%BB%9E%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B/array-2/",
            "title": "陣列 (array)(下)",
            "date_published": "2022-05-20T08:42:28.000Z",
            "content_html": "<h3 id=\"概要\"><a class=\"anchor\" href=\"#概要\">#</a> 概要</h3>\n<p>本篇文章主要講述陣列的應用，包括多項式加 (減) 法、大數運算、進制轉換，以及二維陣列應用中的 magic square 、game of life。有關陣列這種資料結構的特性請參照上篇喔</p>\n<h3 id=\"多項式加減法\"><a class=\"anchor\" href=\"#多項式加減法\">#</a> 多項式加 (減) 法</h3>\n<p>我們可以用陣列來儲存多項式的係數，一般做法是先輸入多項式的最高次方，再依次輸入係數 (0 也要輸入)，以 P1 + P2 為例</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>P</mi><mn>1</mn><mo>=</mo><mn>125</mn><msup><mi>x</mi><mn>5</mn></msup><mo>+</mo><mn>63</mn><msup><mi>x</mi><mn>4</mn></msup><mo>+</mo><mn>37</mn><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>43</mn></mrow><annotation encoding=\"application/x-tex\">P1=125x^5+63x^4+37x^2+43\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\">6</span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">3</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>P</mi><mn>2</mn><mo>=</mo><mn>68</mn><msup><mi>x</mi><mn>6</mn></msup><mo>+</mo><mn>43</mn><msup><mi>x</mi><mn>5</mn></msup><mo>+</mo><mn>26</mn><msup><mi>x</mi><mn>4</mn></msup><mo>+</mo><mn>18</mn><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">P2=68x^6+43x^5+26x^4+18x^2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>可以用下面的程式碼計算</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> p1<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> dim_p1<span class=\"token punctuation\">,</span>dim_p2<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>dim_p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>dim_p1<span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>dim_p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>dim_p2<span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dim_p1<span class=\"token operator\">>=</span>dim_p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>dim_p1<span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>p1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>p2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>dim_p2<span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>p1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>p2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>輸入與輸出長這樣</p>\n<p><img data-src=\"https://i.imgur.com/hQPjr6a.png\" alt=\"\" /></p>\n<p>用陣列來做多項式加法很方便只需要注意清空，以及儲存的順序 (是把最高位儲存在 index 最高還是最低) 每個人都有自己習慣的做法，後續處理時不要搞錯就好。</p>\n<h3 id=\"進制轉換\"><a class=\"anchor\" href=\"#進制轉換\">#</a> 進制轉換</h3>\n<p>有時候我們會想要把 435 這個數字拆成 4、3、5 儲存在陣列中，把十進位的數字拆成一個一個元素，可以這麼做</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> digit<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        digit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>n<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        n<span class=\"token operator\">/=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>digit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>不過進制轉換最有趣的是可以幫助我理解電腦儲存資料的方式，電腦是 2 進位，一個 int 是 4 個 byte 也就是 32 個 bit，所以十進位的整數 1 在電腦中是以<br />\n<strong> 00000000 00000000 00000000 00000001</strong><br />\n 這樣的方式儲存<br />\n那 float 呢？flaot 也是 4 個 byte ，但 float 的 1 在電腦中儲存卻是長這樣<br />\n<strong> 00111111 10000000 00000000 00000000</strong><br />\n 同樣是 1 卻長得不一樣，因為 float 是用 IEEE-754 的標準，32 碼中第一碼表示正負，之後 8 碼表示 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>x</mi></msup><mo>−</mo><mn>127</mn></mrow><annotation encoding=\"application/x-tex\">2^x-127</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.747722em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">7</span></span></span></span> 中的 x，最後 23 碼表示小數，2 的 23 次方是 7 位數，所以 flaot 的精確度是小數以下 7 位</p>\n<p><img data-src=\"https://i.imgur.com/HkJsY56.png\" alt=\"\" /></p>\n<p>我們可以透過 C 語言的 union 來把數字轉成 2 進位</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> x2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> input<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">.</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 若想把整數改成 2 進位可以改成 input.x2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> base<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">31</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        base<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span><span class=\"token number\">31</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>x2<span class=\"token operator\">&amp;</span>base<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>union 是同一個空間儲存兩種型態的資料，意即雖然在 union 中有兩個變數，卻是共享同一個空間，當我輸入 input.x1 時，那塊空間就是儲存 flaot ，而我用 int 輸出時就是強迫他把 flaot 當成 int 來解讀，稱作指標轉型，注意這裡和強制轉型不一樣，強制轉型是指把變數的<strong>值</strong>變成另一種型態，在強制轉型的過程中也會改變資料儲存的方式，指標轉型卻是把 float 資料儲存的方式當成 int 來解讀，舉例來說把日文翻譯輸出成中文，就像一般的強制轉型，翻譯雖然會失真，但只要翻譯技術夠好，還是可以得到差不多意思的中文。指標轉型卻是完全把日文當成中文來讀，可能會遇到一些漢字，但這些漢字和真正的中文字卻有很大意義落差，我們可能會完全解讀錯誤。<br />\n以下程式碼一樣可以得出 flaot 的 2 進位表示，也能更明顯看出指標轉型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">binary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">float</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">binary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">binary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> base<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">31</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        base<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span><span class=\"token number\">31</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>n<span class=\"token operator\">&amp;</span>base<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"magic-square\"><a class=\"anchor\" href=\"#magic-square\">#</a> Magic square</h3>\n<p>在二維陣列中有一個很知名的題目稱作奇數魔方陣，在一個 n * n 的方陣中，輸入 1 到 n 平方 (n 是奇數)，只要依循下面規則就可以使各行、各列及對角線之和的值相等:<br />\n 先把 1 填入最上面中間的格子，接著往左上方填</p>\n<ul>\n<li>若空格已被填滿，在原地的下一個空格填上數字</li>\n<li>超出方陣，則往下到最底層或往右到最右方</li>\n<li>若往下或往右到最底依然超出方陣，就在原地下一格填上數字</li>\n</ul>\n<p>舉例來說 3 * 3 的魔方陣長這樣</p>\n<p><img data-src=\"https://i.imgur.com/Rst9S7d.png\" alt=\"\" /></p>\n<p>那怎麼用程式實作出接下來的魔方陣呢？用二維陣列來模擬就可以了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdbool.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span>row<span class=\"token punctuation\">,</span>column<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> magic<span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    bool done<span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    row<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    column<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    magic<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    done<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>num<span class=\"token operator\">&lt;=</span>s<span class=\"token operator\">*</span>s<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">&lt;=</span>row<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token number\">0</span><span class=\"token operator\">&lt;=</span>column<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span>done<span class=\"token punctuation\">[</span>row<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            row<span class=\"token operator\">-=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            column<span class=\"token operator\">-=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            magic<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            done<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>row<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token number\">0</span><span class=\"token operator\">&lt;=</span>column<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span>done<span class=\"token punctuation\">[</span>s<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            row<span class=\"token operator\">=</span>s<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            column<span class=\"token operator\">-=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            magic<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            done<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">&lt;=</span>row<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>column<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span>done<span class=\"token punctuation\">[</span>row<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            row<span class=\"token operator\">-=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            column<span class=\"token operator\">=</span>s<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            magic<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            done<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            row<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            magic<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            done<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>magic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>用 s 表示 n ，done 紀錄是否已被填寫，magic 記錄格子裡的數字。</p>\n<h3 id=\"game-of-life\"><a class=\"anchor\" href=\"#game-of-life\">#</a> game of life</h3>\n<p>這個遊戲是英國數學家 John Horton Conway 在 1970 年發明，這個遊戲沒有玩家，方法如下：</p>\n<ul>\n<li>對一個細胞來說，如果他九宮格內只有 1 個或 0 個活細胞，那他會孤單死</li>\n<li>若九宮格內有 2 個或 3 個 活細胞，那他會繼續存活</li>\n<li>若九宮格內超過 3 個活細胞他會擁擠死</li>\n<li>若一個死細胞的九宮格內恰好有 3 個活細胞，則他會復活</li>\n</ul>\n<p>這個遊戲有趣的點在於某些輸入會讓這個細胞圖產生循環，以下是從 wiki 複製下來的示意圖</p>\n<p><img data-src=\"https://i.imgur.com/ZwMYW5z.gif\" alt=\"\" /></p>\n<p>看起來真的很可愛，有興趣的話可以到以下網址找更多資料 <span class=\"exturl\" data-url=\"aHR0cHM6Ly8=\">https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life</span></p>\n<p>我們來用程式實作細胞遊戲，先來分析</p>\n<ul>\n<li>當九宮格內的細胞數為 0、1、4、5、6、7、8 時，細胞死亡</li>\n<li>當九宮格內的細胞數為 2 時，維持其狀態</li>\n<li>當九宮格內部的細胞數為 3 時，下一輪一定是活的狀態</li>\n</ul>\n<p>我們用 1 表示活，0 表示死</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdbool.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">neighbor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>bool map<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>new_map<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span><span class=\"token function\">neighbor</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        new_map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        new_map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                        new_map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>new_map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">neighbor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>cell<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>row<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>row<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span>column<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>column<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>i<span class=\"token operator\">>=</span><span class=\"token number\">6</span><span class=\"token operator\">||</span>j<span class=\"token operator\">>=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                cell<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        cell<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">return</span> cell<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>這段程式碼圖形是上面的圖喔，如果有興趣也可以試做看看其他圖形，以上就是陣列的下篇，祝大家閱讀愉快，充分掌握陣列的技巧！</p>\n",
            "tags": [
                "C"
            ]
        },
        {
            "id": "https://lu1hoao.github.io/2022/05/17/%E4%B8%80%E9%BB%9E%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B/array/",
            "url": "https://lu1hoao.github.io/2022/05/17/%E4%B8%80%E9%BB%9E%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B/array/",
            "title": "陣列 (array)(上)",
            "date_published": "2022-05-17T08:42:28.000Z",
            "content_html": "<h3 id=\"概要\"><a class=\"anchor\" href=\"#概要\">#</a> 概要</h3>\n<p>我覺得資料結構是資訊領域很「美妙」的一門學問：))，資料結構是指我們看待資訊的方式 (包括輸入或是讀檔案)，同樣的一筆數據我們用不同的資料結構去看待就會具有不一樣的性質，比如 3 4 5 8 7 ，這五個數字，如果我們用五個整數變數去紀錄，感覺就好像這五個數字之間是獨立的，但如果用一個有五個空間的陣列去紀錄，就會給人一種<strong>這五個數字是有關係</strong>的感覺，他們共同組成一筆輸入。總而言之資料結構就是讓我們用不同角度去看待同一件事情，而本篇文章主要介紹陣列</p>\n<h3 id=\"陣列性質array\"><a class=\"anchor\" href=\"#陣列性質array\">#</a> 陣列性質 (array)</h3>\n<p>在 C 語言中提供了很多型態的陣列，在宣告的時候只要表明型態與大小，即可完成，但要注意陣列的大小在一開始就要用明確數字表示，如果用變數 (就算執行到該行該變數已經有一個確定的值) 很多編譯器是不給過的喔！</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 宣告有 20 個整數空間的陣列</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不太好的寫法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> string<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 宣告有 20 個字元空間的陣列，也可以用來表示句子</span></pre></td></tr></table></figure><p>陣列具有以下性質</p>\n<ol>\n<li>在記憶體中空間是<strong>連續分布</strong>，所以可以用 C 語言中提供的指標概念迅速走訪</li>\n<li>修改特定元素的值非常容易</li>\n<li>插入或刪除元素不方便</li>\n</ol>\n<p><strong>適合用在儲存同一型態的多個變數</strong>，最好是這些變數的數量固定，不會輕易插入或刪除。比如計算全班分數的平均<br />\n假設全班有 25 人，想計算全班的數學平均，就可以這麼做</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">25</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> math_score<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//index 從 0 到 24</span></pre></td></tr></table></figure><p>這樣既可以記錄個人資訊，又可以快速計算整體資訊。</p>\n<h3 id=\"多維陣列\"><a class=\"anchor\" href=\"#多維陣列\">#</a> 多維陣列</h3>\n<p>前面說的是一維陣列，又稱為線性陣列，陣列也可以是多維的，用來描述矩陣或是立體圖形</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一個具有 2 row 3 column 的矩陣</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> string<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 可以看成有五個句子，每個句子是 20 個字元的長度</span></pre></td></tr></table></figure><p>多維陣列在人類心中雖然是具有幾何意義的 (比如圖片或方塊) 但對電腦來說還是要壓成一維來處理，才能表現出連續儲存的性質，那要怎麼把多維陣列壓成一維陣列呢？舉例來說，假設現在宣告一個陣列  <code>int array[3];</code> ，假設  <code>array[0]</code>  的位置是  <code>start</code> ，那  <code>array[2] </code> 的位置就是  <code>start+2</code> ，用程式碼來更詳細說明</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>輸出結果會長這樣</p>\n<p><img data-src=\"https://i.imgur.com/ojLF3K7.png\" alt=\"\" /></p>\n<p>多維陣列則是這樣</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> offset<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span>offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>輸出結果就是</p>\n<p><img data-src=\"https://i.imgur.com/PYJF95n.png\" alt=\"\" /></p>\n<p>offset 就是在把三維壓成一維的過程，計算過程是第一維度數字 * 第二維度的大小 * 第三維度的大小 + 第二維度的數字 * 第三維度的大小<br />\n這樣做屬於以 row 為主的壓縮</p>\n<h3 id=\"矩陣乘法\"><a class=\"anchor\" href=\"#矩陣乘法\">#</a> 矩陣乘法</h3>\n<p>因為具有維度的概念，<strong>陣列就很適合拿來處理矩陣或圖片</strong>，舉例來說想要做矩陣乘法我們可以用以下程式碼 (假設是 2 row 3 column 的矩陣乘上 3 row 2 column = 2 row 2 column 的矩陣)</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>           sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>           <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>               sum<span class=\"token operator\">+=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>           c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>           <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>       <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"行列互換\"><a class=\"anchor\" href=\"#行列互換\">#</a> 行列互換</h3>\n<p>行列互換是矩陣當中常見的運算，就像把矩陣順時針或逆時針旋轉 90 度，但要注意矩陣的行列互換和向量旋轉是不一樣的喔，一般向量旋轉常見於圖片旋轉，那我們會透過旋轉矩陣來做線性轉換</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>rotate<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">//right</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           rotate<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"向右轉 90 (行列互換)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>           <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>rotate<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>       <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token comment\">//left</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>           rotate<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"向左轉 90 (行列互換)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>           <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>rotate<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>       <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"陣列與圖片\"><a class=\"anchor\" href=\"#陣列與圖片\">#</a> 陣列與圖片</h3>\n<p>我們在現實生中也可以使用陣列模擬矩陣達到編輯圖片的效果<br />\n假設現在有一張圖片，四點座標如下</p>\n<p><img data-src=\"https://i.imgur.com/cEPR1BA.png\" alt=\"\" /></p>\n<p>如果要往左往右移，那就是這些點的 x 座標加減一個數字，上下移就是 y 座標加減數字，放大縮小則是建立向量，乘上倍數，旋轉就是乘上旋轉矩陣，鏡像也是透過線性轉換，簡而言之我們只要有辦法建立向量就有辦法用陣列表示再透過線性代數學到的那些矩陣運算得到想要的結果，因為向量建立和中心點有密切關係 (比如是對中心放大縮小或是對頂點放大縮小，其座標表示會不一樣) 所以在實作的時候要小心，這裡感覺和數學比較相關，程式技巧基本上還是矩陣乘法所以就不舉例了。</p>\n<h3 id=\"二維陣列與字串\"><a class=\"anchor\" href=\"#二維陣列與字串\">#</a> 二維陣列與字串</h3>\n<p>二維陣列可以用來表示多個相關的字串，比如電腦算命也是事先把結果存在資料庫，再根據使用者的輸入，輸出相對應的箴言，我們用亂數來模擬</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> string<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"Variety is the spice of life.\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"Bad times make a good man.\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">\"Doubt is the key to knowledge.\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"There is no royal road to learning.\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">\"Life is real, life is earnest.\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span>string<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>利用二維陣列就可以一次儲存多個句子，C 語言在處理字串上面比較麻煩，因此對陣列的掌握度越高處理字串也越輕鬆喔 (其實還是仰賴函數庫居多啦哈哈但至少要知道回傳值型態)</p>\n<h3 id=\"小節\"><a class=\"anchor\" href=\"#小節\">#</a> 小節</h3>\n<p>本篇文章主要介紹陣列的特性以及陣列作為矩陣的運用，下篇則會介紹一維陣列在多項式加法、進制表示、大數加法的應用，以及陣列題目中非常有名的 magic square 、game of life，祝大家閱讀愉快</p>\n",
            "tags": [
                "C"
            ]
        },
        {
            "id": "https://lu1hoao.github.io/2022/05/14/%E4%B8%80%E9%BB%9E%E9%BB%9E%E6%BC%94%E7%AE%97%E6%B3%95/combination/",
            "url": "https://lu1hoao.github.io/2022/05/14/%E4%B8%80%E9%BB%9E%E9%BB%9E%E6%BC%94%E7%AE%97%E6%B3%95/combination/",
            "title": "C 語言組合 (combination)",
            "date_published": "2022-05-14T08:42:28.000Z",
            "content_html": "<h3 id=\"概要\"><a class=\"anchor\" href=\"#概要\">#</a> 概要</h3>\n<p>本篇文章講述以 C 語言實作排列組合中的「組合」，輸出從 m 個數當中取 n 個數的所有取法，在組合當中核心概念是遞迴，之後也會用專門文章來介紹遞迴的概念與其他應用</p>\n<h3 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h3>\n<p>在做遞迴相關題目時，個人覺得有幾件事非常重要</p>\n<ol>\n<li><strong>設定 return 條件</strong><br />\n遞迴一定要 return ，不然會永無止盡的呼叫下去最後 stackoverflow ， 如果沒設定 return 條件編譯器也會提醒我們。<br />\n那麼在 m 個數中取出 n 個數，這個問題的 return 條件是甚麼呢？ return 條件的意思就是：到了這個條件就不需要再遞迴下去了！已經夠了，所以在組合問題中的 return 條件就是<strong>已經選了 n 個數的時候</strong>，已經挑好 n 個數了現在只需要印出來就好，不用再遞迴。</li>\n<li><strong>判斷 return 之後需不需要修改狀態</strong><br />\n函數 return 後會回到呼叫他的函數，並從呼叫後的下一行開始執行，有時候我們會在這裡修改某一些數的值，讓函數再次遞回達到新的條件，在組合中就會遇到這樣的情況，通常是在做<strong>要或不要</strong>這種問題時會發生，對某一個元素而言，選或不選都要考慮，那就要確保這兩種情況都會發生，假設第一次是選， return 之後就要把值改成不選</li>\n<li><strong>思索非遞迴解法</strong><br />\n第三步比較困難， 但理論上所有的遞迴解法都可以展開變成非遞迴解法，做這一步主要是進一步去思考遞迴真的有比較好嗎？會不會有更好的做法？畢竟答案不是對就好，還要快、省空間</li>\n</ol>\n<h3 id=\"圖說\"><a class=\"anchor\" href=\"#圖說\">#</a> 圖說</h3>\n<p>假設我們要從這 9 個數中取出 4 個數，設定一個變數叫作 count，表示選了幾個數，最初 count=0</p>\n<p><img data-src=\"https://i.imgur.com/S21TtRO.png\" alt=\"\" /></p>\n<p>指標從第一個數出發，要選嗎？要！因為這時 count=0，0&lt;4，還沒達到 return 條件所以選，然後 count 變成 1</p>\n<p><img data-src=\"https://i.imgur.com/WEh7PjD.png\" alt=\"\" /></p>\n<p>接著把指標移到第二個數，要選嗎？要 (1&lt;4) 選了之後 count=2</p>\n<p><img data-src=\"https://i.imgur.com/0aRz215.png\" alt=\"\" /></p>\n<p>指標移到第三個數，要選嗎？要 (2&lt;4) 選了之後 count=3</p>\n<p><img data-src=\"https://i.imgur.com/Gt59us8.png\" alt=\"\" /></p>\n<p>指標移到第四個數，要選嗎？要 (3&lt;4) 選了之後 count=4</p>\n<p><img data-src=\"https://i.imgur.com/r9tmFyW.png\" alt=\"\" /></p>\n<p>指標移到第 5 個數，發現 count 已經等於 4 了，所以印出 5 9 3 1</p>\n<p><img data-src=\"https://i.imgur.com/Oi1PaTF.png\" alt=\"\" /></p>\n<p>然後 return ，return 後把 1 改成不選，count-1 (變成 3 因為 1 不選)</p>\n<p><img data-src=\"https://i.imgur.com/WQyrIXc.png\" alt=\"\" /></p>\n<p>把指標移到 2 要選嗎？要 ，因為 (3&lt;4)，選完之後 count 變成 4</p>\n<p><img data-src=\"https://i.imgur.com/Inud9Ba.png\" alt=\"\" /></p>\n<p>接著把指標移到 8 ，發現 count=4 ，所以印出 5 9 3 2</p>\n<p><img data-src=\"https://i.imgur.com/bQ9ns3s.png\" alt=\"\" /></p>\n<p>然後 return ，把 2 改成不選，count - 1</p>\n<p><img data-src=\"https://i.imgur.com/vPGZKjh.png\" alt=\"\" /></p>\n<p>如此反覆最後就會得到所有組合。<br />\n把步驟條列話可以得到以下：</p>\n<ol>\n<li>把輸入的數字存成陣列</li>\n<li>指標由左到右移動，若 count &lt;4，就把該數字的布林值設為 1 (表示選擇)，count 也加 1</li>\n<li>當 count=4 時，輸出所選數字，並 return 把最後一個選擇的數字移除</li>\n</ol>\n<p>接著來看程式碼</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">n</span> <span class=\"token expression\"><span class=\"token number\">4</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdbool.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">com</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> base<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>bool is_select<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">com</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">==</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>is_select<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>base<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        is_select<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">com</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        is_select<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在這裡比較需要注意的是<strong>每次遞迴都只能考慮該 index 之後的狀況，前面的狀況要等到 return 才能修改</strong>。index 表示指標，現在從哪裡開始作遞迴的意思， count 表示選了幾個數，初值為 0 ，m 和 n 都是可以自由修改的變數，表示我們要從 m 個數中取出 n 個數，bool 陣列則是在記錄這個數要選或不選，初值大家都為 0 表示尚未選擇</p>\n<h3 id=\"小結\"><a class=\"anchor\" href=\"#小結\">#</a> 小結</h3>\n<p>組合是生活中很常遇到的問題，數學上也有很多很複雜的組合題目，不光是選出特定個數而已，選出的的這些元素還要達成其他條件，比如不同色啊、重量超過多少呀等等的，這裡示範的程式碼只是最簡單的情況，但上述情況都脫離不了遞迴的思考觀念，有些更進階題目可以使用動態規劃 (Dynamic programming)，把問題分成幾個子集合，對每個子集合選出最佳解之後就找到整體的最佳解了 (前提是要確保題目本身符合最佳子結構的條件啦)，之後在遞迴的文章中也會說明</p>\n<h3 id=\"非遞迴解法\"><a class=\"anchor\" href=\"#非遞迴解法\">#</a> 非遞迴解法</h3>\n<p>呼應前面提到作遞迴解法時也可以思考是否存在非遞迴解法，比如這題就可以用 4 個迴圈實作出非遞迴解法喔，有興趣可以試試看！</p>\n",
            "tags": [
                "C",
                "combination"
            ]
        },
        {
            "id": "https://lu1hoao.github.io/2022/05/07/%E4%B8%80%E9%BB%9E%E9%BB%9E%E6%BC%94%E7%AE%97%E6%B3%95/permutation/",
            "url": "https://lu1hoao.github.io/2022/05/07/%E4%B8%80%E9%BB%9E%E9%BB%9E%E6%BC%94%E7%AE%97%E6%B3%95/permutation/",
            "title": "C 語言排列 (permutation)",
            "date_published": "2022-05-07T08:42:28.000Z",
            "content_html": "<h3 id=\"概要\"><a class=\"anchor\" href=\"#概要\">#</a> 概要</h3>\n<p>在 C++ 中有一個函數叫做 next_permutation ，它的作用是可以依照字典排序法列出一個數列 (或字串) 的下一個排列，所謂的字典排列就是先比較第一個數，第一個數一樣大時 ( ASCII 碼相同 )，比較第二個數，直到分出大小，舉例來說 1 2 3 這三個數字的下一個排列是 1 3 2 ，再下一個是 2 1 3，接著 2 3 1、3 1 2、3 2 1，那我們要怎麼用 C 來實現呢？<br />\n先來看看 C++ 的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// next_permutation example</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span>     <span class=\"token comment\">// std::cout</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span>    <span class=\"token comment\">// std::next_permutation, std::sort</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> myints<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sort</span> <span class=\"token punctuation\">(</span>myints<span class=\"token punctuation\">,</span>myints<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The 3! possible permutations with 3 elements:\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> myints<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&lt;&lt;</span> myints<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&lt;&lt;</span> myints<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">next_permutation</span><span class=\"token punctuation\">(</span>myints<span class=\"token punctuation\">,</span>myints<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"After loop: \"</span> <span class=\"token operator\">&lt;&lt;</span> myints<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&lt;&lt;</span> myints<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&lt;&lt;</span> myints<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>出來的結果是這樣的</p>\n<p><img data-src=\"https://i.imgur.com/Dn0Guyh.png\" alt=\"\" /></p>\n<p>咦陣列在函數中不是傳址嗎？怎麼迴圈結束最後跑出來還是 1 2 3？這是因為  <code>next_permutation()</code>  這個函數的回傳值是一個布林值，如果還找得到比呼叫時還要大的排列，就把陣列變成比較大的排列然後回傳 true，如果找不到，就由小到大排列該陣列，然後回傳 false</p>\n<h3 id=\"手刻一個\"><a class=\"anchor\" href=\"#手刻一個\">#</a> 手刻一個</h3>\n<p>既然 C 沒有，那我們就手刻一個 C 的 next_permutation 函數，在這裡我盡量做得和 C++ 的功能相同，首先要先來看看到底怎麼找出下一個排列的，有四步驟</p>\n<ol>\n<li><strong>由右至左找到第一個比其後項小的數，把該項設為 flag_index</strong></li>\n<li><strong>由右至左找到第一個比 flag_index 所指的數大的數，交換他們兩個</strong></li>\n<li><strong>把 flag_index 後的數由小到大排列</strong></li>\n<li><strong>當 flag_index 小於 0 時，return false</strong></li>\n</ol>\n<p>舉例來說，尋找下面這個例子的 next_permutation</p>\n<p><img data-src=\"https://i.imgur.com/nBJR61Q.png\" alt=\"\" /></p>\n<p>把 index6 (此刻數值為 4) 設為 flag_index，因為 4&lt;7</p>\n<p><img data-src=\"https://i.imgur.com/eAE9NBD.png\" alt=\"\" /></p>\n<p>由右至左找到第一個比 4 大的數，發現是 6，交換他們倆個</p>\n<p><img data-src=\"https://i.imgur.com/GyXpVlb.png\" alt=\"\" /></p>\n<p>由小到大排列 6 之後的數</p>\n<p><img data-src=\"https://i.imgur.com/DNhuGcs.png\" alt=\"\" /></p>\n<p>這樣就找到了 5 9 3 1 2 8 6 4 7，是 5 9 3 1 2 8 4 7 6 的下一個排列</p>\n<p>接下來看程式碼，先看比較簡單的，不是用指標做的</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">swap</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdbool.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>bool <span class=\"token function\">nper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>flag_index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    flag_index<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag_index<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>num<span class=\"token punctuation\">[</span>flag_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>flag_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>flag_index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>把要排的陣列和長度 (個數) 傳進函數，然後依照上面列出的 4 步驟進行，比較需要注意的是<strong>由小到大排序</strong>，這裡看起來沒有和排序有關的程式碼呀只有不斷的 swap (交換)，為甚麼會這樣？解答這個問題我們先來看看甚麼時候會用到排序， 2 種情況</p>\n<ul>\n<li><strong>陣列由大到小排列，無法找到下一個排列</strong><br />\n既然陣列由大到小排，要由小到大排就是倒過來排，所以是不斷的頭尾交換</li>\n<li><strong>從 flag_index 之後到結尾</strong><br />\n做完第二步之後可以發現，flag_index 之後到結尾也是由大到小排列，所以想要變成由小到大排也只需要不斷的頭尾交換</li>\n</ul>\n<p>在上面這個函數中如果想要排列字串，記得把參數型態改一下，如果只想排列某幾個數字記得把長度改一下<br />\n接著看一下用指標做的</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">swap</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdbool.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>bool <span class=\"token function\">nper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">nper</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span>num<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 注意這裡傳的是位址</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>bool <span class=\"token function\">nper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>flag_index<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span>end<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span>p<span class=\"token operator\">></span>start<span class=\"token punctuation\">;</span>p<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    flag_index<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>flag_index<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span>end<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>flag_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>flag_index<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span>flag_index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>q<span class=\"token operator\">=</span>end<span class=\"token punctuation\">;</span>p<span class=\"token operator\">&lt;</span>q<span class=\"token punctuation\">;</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>q<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span>start<span class=\"token punctuation\">,</span>q<span class=\"token operator\">=</span>end<span class=\"token punctuation\">;</span>p<span class=\"token operator\">&lt;</span>q<span class=\"token punctuation\">;</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>q<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"結論\"><a class=\"anchor\" href=\"#結論\">#</a> 結論</h3>\n<p>在 C++ 提供的函數中不只可以排數字陣列也可以排字串，所以我想他的參數應該是 void* 型態 (才能兩者都接)，但這也意味著函數內部要有一些步驟去確認傳進來的參數型態，才能決定要用怎麼樣的指標做後續處理，這部分有點麻煩也不是 next_permutation 的重點，所以在這裡依然使用 int* 的型態。我們自己手刻時可以為自己的情況量身打造只要寫出能滿足自己需求的函數就好，但寫函數庫裡的函數就必須考量到很多使用者的不同需求，函數的適用範圍越廣越好，因此產生了以上差異<br />\n另外除了 next_permutation，還有 prev_permutation (前一個排列)，步驟和上面說得很類似，只要把小改成大就可以了，步驟如下</p>\n<ol>\n<li><strong>由右至左找到第一個比其後項大的數，把該項設為 flag_index</strong></li>\n<li><strong>由右至左找到第一個比 flag_index 所指的數小的數，交換他們兩個</strong></li>\n<li><strong>把 flag_index 後的數由大到小排列</strong></li>\n<li><strong>當 flag_index 小於 0 時，return false</strong></li>\n</ol>\n<p>有興趣也可以自己試試喔</p>\n",
            "tags": [
                "C",
                "permutation"
            ]
        },
        {
            "id": "https://lu1hoao.github.io/2022/05/05/%E4%B8%80%E9%BB%9E%E9%BB%9E%E6%BC%94%E7%AE%97%E6%B3%95/sort/",
            "url": "https://lu1hoao.github.io/2022/05/05/%E4%B8%80%E9%BB%9E%E9%BB%9E%E6%BC%94%E7%AE%97%E6%B3%95/sort/",
            "title": "C 語言排序 (sort)",
            "date_published": "2022-05-05T08:42:28.000Z",
            "content_html": "<blockquote>\n<p>本篇文章圖片參考自 &lt;演算法圖鑑&gt; 一書，裡面有很多可愛圖片說明幫助大家理解，有興趣的人可以去看看喔<br />\n首圖來源 R. Kikuo Johnson: “On Line.” Unpublished. The New Yorker, 2012</p>\n</blockquote>\n<h3 id=\"概要\"><a class=\"anchor\" href=\"#概要\">#</a> 概要</h3>\n<p>電腦經常做的運算之一就是排序，瀏覽網頁時把商品依照進貨時間排序、寫  excel 時依照座號排列等等，因為真的太常用到排序了，一個好的排序演算法就很重要，我們現在使用往往覺得電腦排序就按一個鍵就完成了，那按下滑鼠之後電腦到底麼排的呢？本篇文主要介紹 5 種排序方式，分別是氣泡 (bubble sort)、選擇 (selection sort) 、插入 (insertion sort)、合併 (merge sort)、快速 (quick sort) 排序法</p>\n<h3 id=\"氣泡排序-bubble-sort\"><a class=\"anchor\" href=\"#氣泡排序-bubble-sort\">#</a> 氣泡排序 (bubble sort)</h3>\n<p>氣泡排序法式不停地由右往左兩兩比較，小的數字就會慢慢浮到前面，我們用圖片來說明，假設想要把以下九個數由小到大排列</p>\n<p><img data-src=\"https://i.imgur.com/NYZ6s4B.png\" alt=\"\" /></p>\n<p>先比較最後兩個數 (7,6)</p>\n<p><img data-src=\"https://i.imgur.com/8aEJNBJ.png\" alt=\"\" /></p>\n<p>因為 7 比 6 大，所以交換兩個數，接著比較 6、4</p>\n<p><img data-src=\"https://i.imgur.com/5j6oYnY.png\" alt=\"\" /></p>\n<p>依此類推，當黑色框框第一次跑道最左邊時，最小的數字 1 也跑到最左邊了</p>\n<p><img data-src=\"https://i.imgur.com/fLW2mIU.png\" alt=\"\" /></p>\n<p>接下來固定 1 的位置，把黑色框框又移到最右邊重新開始</p>\n<p><img data-src=\"https://i.imgur.com/6wzFsLw.png\" alt=\"\" /></p>\n<p>這樣反覆就可以得到 1 2 3 4 5 6 7 8 9 的排序了<br />\n我們來看程式碼</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bsort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>MAX<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span>MAX<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">></span>i<span class=\"token punctuation\">;</span><span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>num<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                num<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>MAX<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>用雙層迴圈可以解出 bubble sort ，時間複雜度是 n 平方 ，雖然很慢，但很符合人的直覺，我的程設老師說非本科只要會 bubble sort 就好哈哈，但如果資訊本科只會寫 bubble sort 那一定會被當嗚嗚</p>\n<h3 id=\"選擇排序法-selection-sort\"><a class=\"anchor\" href=\"#選擇排序法-selection-sort\">#</a> 選擇排序法 (selection sort)</h3>\n<p>選擇排序法是指從一段數列中依序選出最小的、第二小的、第三小的，依此類推，最後完成排序的演算法，我們用圖片來說明<br />\n一樣排序這 9 個數字</p>\n<p><img data-src=\"https://i.imgur.com/4ZkeS6N.png\" alt=\"\" /></p>\n<p>現在我們想排好第一個位置，也就是把最小的數字放到第一個，所以我們把第一個位置的數字當做指標，後面的數字如果比第一個數字小，就把他們做交換 (請注意，在這過程中第一個數字的值會不斷改變)<br />\n 固定第一個數值 (現在是 5)，因為 9 比 5 大，所以不用動</p>\n<p><img data-src=\"https://i.imgur.com/WKsGDCU.png\" alt=\"\" /></p>\n<p>接下來把箭頭移到 3 ，發現 3 比 5 小，所以交換他們兩個</p>\n<p><img data-src=\"https://i.imgur.com/tWD3Lk1.png\" alt=\"\" /></p>\n<p>接下來把箭頭移到 1 ，注意現在框起來的數字已經變成 3 了</p>\n<p><img data-src=\"https://i.imgur.com/Q0SDoe2.png\" alt=\"\" /></p>\n<p>當箭頭第一次移到最右邊時可以看到，第一個位置已經排好了，是最小的數字 (這裡為 1)</p>\n<p><img data-src=\"https://i.imgur.com/w6cVQm0.png\" alt=\"\" /></p>\n<p>接下來固定第二個數字重頭開始，找出第二小的數字</p>\n<p><img data-src=\"https://i.imgur.com/oTvb2AW.png\" alt=\"\" /></p>\n<p>反覆操作最後就會由小到大排列了<br />\n接下來看一下程式碼</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ssort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>MAX<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>MAX<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>MAX<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>用雙層迴圈可以解出選擇排序法，時間複雜度是 n 平方，雖然慢但很好記憶。</p>\n<h3 id=\"插入排序法-insertion-sort\"><a class=\"anchor\" href=\"#插入排序法-insertion-sort\">#</a> 插入排序法 (insertion sort)</h3>\n<p>插入排序是從左邊往右邊依次排序，過程中左邊的數一一排序完成，右邊還沒排好的數則插入已經排好的數中的適當位置，用圖片來說明，一樣排序這 9 個數字</p>\n<p><img data-src=\"https://i.imgur.com/TTOUzEs.png\" alt=\"\" /></p>\n<p>假設最左邊的數 (5) 已經排序完成，看 9，發現 9 比 5 大，所以不用動</p>\n<p><img data-src=\"https://i.imgur.com/tlLeg1R.png\" alt=\"\" /></p>\n<p>接下來看 3 ，發現他應該排在 5 的前面，所以先把 3、5 交換，再把 9 、5 交換 (也可以把 5、9 往後移一格，把 3 插入 5 的前面)，然後箭頭移到 1</p>\n<p><img data-src=\"https://i.imgur.com/juGGRSZ.png\" alt=\"\" /></p>\n<p>當箭頭移到最右邊時排序就完成了，來看程式碼</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ssort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>MAX<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>i<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>MAX<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>也看一下例題 zerojudge-c010 <span class=\"exturl\" data-url=\"aHR0cHM6Ly8=\">https://zerojudge.tw/ShowProblem?problemid=c010</span></p>\n<p><img data-src=\"https://i.imgur.com/MaW3AkW.png\" alt=\"\" /></p>\n<p>我們每輸入一個數就對他排序，再輸出此時此刻的中位數</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> now<span class=\"token punctuation\">,</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">10000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    str<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>now<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>now<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>i<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>now<span class=\"token operator\">&lt;</span>str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>k<span class=\"token operator\">></span>j<span class=\"token punctuation\">;</span>k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    str<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>str<span class=\"token punctuation\">[</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>now<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">int</span> med<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>str<span class=\"token punctuation\">[</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>med<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>用兩層迴圈可以實現 insertion sort ，時間複雜度是 n 平方，可以用於邊輸入邊排序的情況</p>\n<h3 id=\"合併排序-merge-sort\"><a class=\"anchor\" href=\"#合併排序-merge-sort\">#</a> 合併排序 (merge sort)</h3>\n<p>合併排序是將想要排序的數列分割成幾乎等長的兩個數列，直到無法再分割 (也就是每個群組只剩下一個數) 時，再合併各組數列，反覆進行同樣操作直到全部的數變成一個數列，用圖片來說明，一樣排序這 9 個數字</p>\n<p><img data-src=\"https://i.imgur.com/m4NUTyd.png\" alt=\"\" /></p>\n<p>把大家分割成組一個數字</p>\n<p><img data-src=\"https://i.imgur.com/cJYm43z.png\" alt=\"\" /></p>\n<p>接著開始合併<br />\n先比較 5 和 9 ， 5 要排在 9 前面，然後比較 3 和 1，1 要排在 3 前面</p>\n<p><img data-src=\"https://i.imgur.com/NeUsaSk.png\" alt=\"\" /></p>\n<p>接下來比較 5 和 1，1 排在 5 前面，比較 5 和 3 ，3 排在 5 前面</p>\n<p><img data-src=\"https://i.imgur.com/OnJDCwF.png\" alt=\"\" /></p>\n<p>依此類推最後就可以排好，看一下程式碼，這是一個遞迴 (recursive) 函數，一開始是做分割，甚麼時候分好呢？start=end 時，也就是個數只剩 1 時</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">msort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> mer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">>=</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> med<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">msort</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span>start<span class=\"token punctuation\">,</span>med<span class=\"token punctuation\">,</span>mer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">msort</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span>med<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">,</span>mer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> pointer_left <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> pointer_right <span class=\"token operator\">=</span> med <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pointer_left <span class=\"token operator\">==</span> med <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>      <span class=\"token comment\">// 左邊空了</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            mer<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num<span class=\"token punctuation\">[</span>pointer_right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            pointer_right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pointer_right <span class=\"token operator\">==</span> end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 右邊空了      </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            mer<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num<span class=\"token punctuation\">[</span>pointer_left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            pointer_left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>pointer_left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">[</span>pointer_right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>        </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            mer<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num<span class=\"token punctuation\">[</span>pointer_left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            pointer_left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>       </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            mer<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num<span class=\"token punctuation\">[</span>pointer_right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            pointer_right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        num<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mer<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>pointer_left 和 pointer_right 表示的是左邊群組中最小的數和右邊群組中最小的數，這樣的排序時間複雜度是 nlog (n)，比前面三種都還要快，但也比較複雜一點</p>\n<h3 id=\"快速排序-quick-sort\"><a class=\"anchor\" href=\"#快速排序-quick-sort\">#</a> 快速排序 (quick sort)</h3>\n<p>聽到這名字感覺就很威 (其實也還好) 快速排序法是選定一個數字作為旗標，比旗標小的移到旗標左邊，比旗標大的移到旗標右邊，排好之後再換另一個數字當作旗標，用圖片來說明<br />\n一開始把 4 作為旗標，比 4 大的移到右邊，比 4 小的 移到左邊</p>\n<p><img data-src=\"https://i.imgur.com/WTB988U.png\" alt=\"\" /></p>\n<p>排好之後可以得到這樣，接下來我們在 4 的左邊挑選一個數作為旗標</p>\n<p><img data-src=\"https://i.imgur.com/XAqt2Im.png\" alt=\"\" /></p>\n<p>假設選 2 ，一樣把比 2 大的移到右邊比 2 小的移到左邊</p>\n<p><img data-src=\"https://i.imgur.com/NuiFNle.png\" alt=\"\" /></p>\n<p>移完之後發現 4 的左邊都排完了 (因為 2 的左邊剩 1 這一個數，不用排，2 的右邊 3、4 也排好了)，來排 4 的右邊，選擇 6 作為旗標依此類推</p>\n<p><img data-src=\"https://i.imgur.com/tKXSxWf.png\" alt=\"\" /></p>\n<p>最後就可以排完了，來看程式碼，這裡的程式碼是把最後一個數字當作旗標，比旗標大的數字不動，比旗標小的數字移到前面 (所以要找到第一個比旗標小的數字， <code>while (i &lt;= high &amp;&amp;num[i] &gt;part_element) i++;</code> )，甚麼時候移完呢？當 i 到最後一個數字的時候 ，swap 是交換的意思，low 指的是現在在旗標前面的位置 (表示 index)，注意這個程式是遞迴，甚麼時候 return 呢？只剩下一個數字的時候，就不用排了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> middle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">>=</span> high<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tmiddle <span class=\"token operator\">=</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> middle<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> middle<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> part_element <span class=\"token operator\">=</span> num<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span>  i <span class=\"token operator\">=</span> low<span class=\"token punctuation\">,</span> real_low <span class=\"token operator\">=</span> low<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> high <span class=\"token operator\">&amp;&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span>part_element<span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> high<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tlow<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> low <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其實 C 語言提供內件快排，只需要這樣</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>a <span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>陣列名稱<span class=\"token punctuation\">,</span>個數<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>型態<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">int</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>a <span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>cmp 表示要遞增排列或遞減，我這樣寫表示遞增。<br />\nquick sort 的時間複雜度是 nlogn，又有內建，為甚麼還要學其他種呢？其實 quick sort 的速度和旗標的選擇有很大的關係，如果旗標選到極值，時間複雜度就變 n 平方，這也是我們需要 merge sort 的原因，因為他是均分數列，那其他時間複雜度高的演算法呢？確實在實務上很少用，但遞迴並不是一個容易理解的概念，用比較簡單的演算法也能正確得出想要的結果，對於電腦的普及以及程式教育都是很重要的事情，評估程式好壞的標準除了時間複雜度和空間複雜度，易讀性也可以作為指標，如果連排序這麼常遇到的問題都寫不出來，對程式初學者來說是很挫折的，所以這些排序方法依然有它們存在的價值。</p>\n<h3 id=\"結論\"><a class=\"anchor\" href=\"#結論\">#</a> 結論</h3>\n<p>排序應該是很多人第一個遇到的演算法，不同的演算法可以有效幫助我們理解電腦和人類在處理數據上的不同，對電腦而言重要的是建立一個標準步驟，反覆執行，就算步驟繁雜也沒關係因為運算速度很快，但絕不能為每個情況打造一個特殊解，人類倒是不太一樣，有時候我們會為了一些題目去背特殊的解法，我想這是電腦和人腦最大的差異。</p>\n",
            "tags": [
                "C",
                "sort"
            ]
        }
    ]
}