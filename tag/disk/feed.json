{
    "version": "https://jsonfeed.org/version/1",
    "title": "Lu Ying • All posts by \"disk\" tag",
    "description": "",
    "home_page_url": "https://lu1hoao.github.io",
    "items": [
        {
            "id": "https://lu1hoao.github.io/2022/06/06/os/os-13/",
            "url": "https://lu1hoao.github.io/2022/06/06/os/os-13/",
            "title": "Mass Storage System",
            "date_published": "2022-06-06T14:23:28.000Z",
            "content_html": "<h3 id=\"概要\"><a class=\"anchor\" href=\"#概要\">#</a> 概要</h3>\n<p>大容量儲存系統一般指的是 disk ，本文主要介紹 disk 的架構、連接 (attachment)、排程、管理，也講述 RAID 的基本知識。</p>\n<h3 id=\"overview\"><a class=\"anchor\" href=\"#overview\">#</a> Overview</h3>\n<p>當我們提及硬碟 (HHD) 就會提到他的存取速度，硬碟存取速度由<br />\n硬碟旋轉到所需位置以及指針移動的時間有關，前者稱為 seek time，後者是 rotation lantency，兩者合稱 Positioning time，通常是微秒等級，disk 和電腦的連接則通常透過 I/O bus，在電腦端會有 Host controller 負責和 disk controller 溝通<br />\n SSD 則是支援隨機存取的 disk ，但通常有固定的寫入次數，因此 SSD controler 要讓每個地方的讀取平均避免壞掉。</p>\n<p><img data-src=\"https://i.imgur.com/R5zSz80.png\" alt=\"\" /></p>\n<h3 id=\"disk-structure\"><a class=\"anchor\" href=\"#disk-structure\">#</a> Disk Structure</h3>\n<p>disk 的基本讀取單位是 logical block，資料會被分成多個 block 然後對應到相應的 sector 中，因此當資料放在近一點的位置，他們的存取速度也會比較快。很多個 disk 合在一起可以形成 disk array ，比如跨國企業的資料可以存放在 disk array 再透過 switch、routing 技術連結到 severr，現在也發展出 Network-Attached Storage ，讓個人存放在 disk array 的資料也可以透過網路連接到筆電、平版等各種裝置 。</p>\n<h3 id=\"disk-scheduling\"><a class=\"anchor\" href=\"#disk-scheduling\">#</a> Disk Scheduling</h3>\n<p>作業系統有責任確保硬體的存取效率，對 disk 而言那意味著作業系統要有一套好的排程系統使得 seek time 最短，而 seek time 又和 seek distance 直接相關，因此衍生出以下幾種排程</p>\n<ul>\n<li>FCFS<br />\n 假設現在指標在 sector 53，而需要存取的資訊分別在 98、183、37、122、14、124、65、67，FCFS 顧名思義就是先來的先處理，別管甚麼距離最佳化了，這樣做的好處在於當資料之間有因果關係時，依然能保持他們的次序而不會出錯，執行過程如下圖，總距離是 640 cylinder</li>\n</ul>\n<p><img data-src=\"https://i.imgur.com/adIyUhK.png\" alt=\"\" /></p>\n<ul>\n<li>SSTF<br />\n 距離最短的先取得，但這個過程會破壞原本的次序，依照上面的例子，總距離是 236 cylinder，執行過程如下圖</li>\n</ul>\n<p><img data-src=\"https://i.imgur.com/L4CA8zZ.png\" alt=\"\" /></p>\n<ul>\n<li>SCAN<br />\nscan 的中文稱作掃描，意思即從頭到尾走一遍遇到所需的資料就執行動作，當資料很分散時這樣的做法就很好，以下是 scan 的執行過程</li>\n</ul>\n<p><img data-src=\"https://i.imgur.com/YavSUMx.png\" alt=\"\" /></p>\n<ul>\n<li>C-SCAN<br />\n 一種改良版 scan，當從最後一個位置跑到第一個位置時 (或相反) 可以對走過的路徑加速，執行過程如下</li>\n</ul>\n<p><img data-src=\"https://i.imgur.com/yB9eUnP.png\" alt=\"\" /></p>\n<ul>\n<li>C-LOOK<br />\n 改良版 C-SCAN ，不只對走過的路徑加速，也優先判斷所需資料中的最大與最小編號，比最小編號小或比最大編號大的位置就不走訪。</li>\n</ul>\n<p><img data-src=\"https://i.imgur.com/Pu4xdX1.png\" alt=\"\" /></p>\n<h3 id=\"disk-management\"><a class=\"anchor\" href=\"#disk-management\">#</a> Disk Management</h3>\n<p>low-level formatting or formatting 中文稱作格式化，會把 disk 分成很多個 sector，由 disk controller 以 sector 為單位的管理，而 OS 為了管理 disk 也會在 disk 中擁有自己的 data structure ，假如我們想在自己的筆電上弄個 D 槽出來就可以透過格式化達成，但筆電出廠時通常已經灌好作業系統，所以除非把作業系統卸載之後再自己裝否則還是無法格式化。<br />\n開機程式存於 ROM 而 Bootstrap loader program 則存在 disk 中的 boots blocks。另外 sector 也要有辦法處理 bad block<br />\n 在虛擬記憶體中我們說過 disk 中會有 proess 的 image ，當 process 被啟用時，時間 swap ，而不必透過檔案系統，存放這些 image 的地方就稱為 swap space ，通常包含程式的 code、text segment，而 kernel 則是透過 swap maps 去追蹤 swap space 的使用情形，如果 swap space 用完了，大部分系統會出現警告。</p>\n<h3 id=\"raid-structure\"><a class=\"anchor\" href=\"#raid-structure\">#</a> RAID Structure</h3>\n<p>RAID 的中文稱作磁碟陣列，在 RAID 尚未被發明之前，都是以單台硬碟作為使用，當第一台硬碟滿後必須加裝第二、三台，在各台硬碟間來回切換非常不方便，RAID 的核心架構就是虛擬架構，透過多台硬碟合成一台虛擬硬碟，而 RAID 也背負著其他要求，像是自動偵測故障硬碟、備份等等。我們通常會用 men time to failure (mttf)、mean time to repair、mean time to data loss 來評估 RAID 的效能， Raid 的資本單位是 disk striping，又可以分成六級</p>\n<ul>\n<li>RAID 0 一般的 RAID，NO COPY、NO PARITY (錯誤容忍)</li>\n<li>RAID mirrired disks，RAID 1 的每一個 disk 都有一份 copy 作為備份</li>\n<li>RAID 2、3、4 現在都很少用</li>\n<li>RAID 5、6 則是分散 parity，容許故障。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Arrael Level</th>\n<th>RAID 0</th>\n<th>RAID 1</th>\n<th>RAID 5</th>\n<th>RAID5+Spare</th>\n<th>RAID 6+Spare</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fault Tolerance</td>\n<td>NO</td>\n<td>容許一台故障</td>\n<td>容許一台故障</td>\n<td>容許兩台故障 (非同步)</td>\n<td>容許兩台故障 (非同步)</td>\n</tr>\n<tr>\n<td>硬碟台數</td>\n<td>2 (以上)</td>\n<td>2</td>\n<td>3 (以上)</td>\n<td>4</td>\n<td>5</td>\n</tr>\n<tr>\n<td>Array Size</td>\n<td>N-1</td>\n<td>N/2</td>\n<td>N-1</td>\n<td>N-2</td>\n<td>N-3</td>\n</tr>\n<tr>\n<td>適用對象</td>\n<td>風險高 NO</td>\n<td>個人</td>\n<td>企業</td>\n<td>企業</td>\n<td>企業</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"結語\"><a class=\"anchor\" href=\"#結語\">#</a> 結語</h3>\n<p>disk 的應用與硬體的架構較相關，隨著硬體技術的進步、disk 容量可以越來越大、價格可以越來越便宜，在 stable sorage 中，要確保資料穩定儲存，就是排除錯誤，一旦發現可能產生的錯誤就不更改 sector 內容，總而言之這章在 OS 中並沒有占很大篇幅，技術細節也應該是電機 (？) 領域，祝大家閱讀愉快。</p>\n",
            "tags": [
                "OS",
                "Disk"
            ]
        }
    ]
}