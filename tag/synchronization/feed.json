{
    "version": "https://jsonfeed.org/version/1",
    "title": "Lu Ying • All posts by \"synchronization\" tag",
    "description": "",
    "home_page_url": "https://lu1hoao.github.io",
    "items": [
        {
            "id": "https://lu1hoao.github.io/2022/04/29/os/os-5/",
            "url": "https://lu1hoao.github.io/2022/04/29/os/os-5/",
            "title": "Synchronization Examples",
            "date_published": "2022-04-29T12:23:28.000Z",
            "content_html": "<h3 id=\"概要\"><a class=\"anchor\" href=\"#概要\">#</a> 概要</h3>\n<p>上篇文章簡單介紹了 Synchronization 的解法，現在我們要來看更多會遇到同步問題的情況 (上次只簡單講了 Bounded-Buffer Problem)，這些經典問題現在都已經變成一種測試，當我們提出新的 Synchronization 方法時，就要拿這些經典問題去測試，看看我們的方法是否比前人的好。同時也會說明一些作業系統是如何支援這些 Synchronization 演算法</p>\n<h3 id=\"bounded-buffer-problem\"><a class=\"anchor\" href=\"#bounded-buffer-problem\">#</a> Bounded-Buffer Problem</h3>\n<p>這個問題就是之前說的有 consumer 和 producer 的問題，我們在這裡把他的演算法寫得更詳細，首先會有共用變數 mutex (初值為 1)、 full ( 初值為 0 ，表示未滿)、 empty (初值為 n , 表示可以放 n 件物品)，對 producer 而言，有以下程式碼</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">/*n-1*/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  critical sextion</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>full<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">/*0+1*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>對 consumer 而言有以下程式碼</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>full<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>要特別注意 empty 和 full 的位置，producer 是要進到 empty 的空間放東西，所以先把 empty 的值扣一， consumer 是到滿的地方拿東西，所以把 full 扣一。 mutex 則是要確保沒有別人在 critical section。</p>\n<h3 id=\"readers-writers-problem\"><a class=\"anchor\" href=\"#readers-writers-problem\">#</a> Readers-Writers Problem</h3>\n<p>剛剛的 Bounded-Buffer Problem 是在描述兩個 process 都可以改值的狀況，還有一種情況是有多個 writer 和多個 reader process 的情況，同一時間可以有多個 reader ，但 writer 只能單獨存在 (writer 不能和 reader 共存也不能和其他 writer 共存)，這種問題通常有兩種解法</p>\n<ol>\n<li><strong>First</strong> 除非 writer 被准許可以寫不然 reader 可以很自由的閱讀</li>\n<li><strong>Second</strong> 當 writer 想寫就寫</li>\n</ol>\n<p>這兩種都是利用 Priority 排序，所以都會有 Starvation 的問題，第一種是 writer 會餓死，第二種是 reader 會餓死，我們來更仔細的看第一種解法，所有 process 會共用以下變數方便 mutex：<strong>rw_mutex (預設為 1)， mutex ( 預設為 1)、read_count (預設為 0)</strong>，為甚麼要計算讀者的人數呢？因為當讀者為 0 時 (read_count=0) 就可以告訴 writer 來寫了 (要沒人看的時候才能寫，因為我們在第一種)，先來看看 writer 的程式碼</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>rw_mutex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">/*writing is performed*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>rw_mutex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>rw_mutex 是一個確定沒有其他 writer 在撰寫，也沒有 reader 在閱讀的機制 (for writer &amp; reader) ，接下來看一下 reader 的程式碼</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  read_count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>read_count<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>rw_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">/* 開始閱讀 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  read_count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>read_count<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>rw_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>為甚麼在進入時要先確認 mutex 呢？不是可以同時讀嗎？這是因為要修改 read_count 的數目，修改共同變數本身就是一個需要進入 critical section 的情況，所以需要有一個 mutex 機制確保一次只有一個 reader process 再更改 read_count ，當讀者是第一個讀者是他要確保已經有都興可以讀了，所以要看一下 rw_mutex 的狀態，最後一個離開的讀者要告訴 writer 好了你可以來寫了。</p>\n<h3 id=\"dining-philosophers-problem\"><a class=\"anchor\" href=\"#dining-philosophers-problem\">#</a> Dining-Philosophers Problem</h3>\n<p>有個命題稱為飢餓的哲學家，一群哲學家坐在一圓桌，不是在思考就是在吃東西，然而這群哲學家使用筷子吃飯，他們左手邊的筷子和左邊的人共用，右手邊的筷子和右邊的人共用，就像下面的圖一樣，黃色的是桌子，藍色是筷子，總共有四位哲學家，共用四支筷子，那哲學家要如何吃飯呢？</p>\n<p><img data-src=\"https://i.imgur.com/Rgw1Dtg.png\" alt=\"\" /></p>\n<p>我們先來看一個<strong>不太好</strong>的解法，共用變數有 chopstick [4] (初值為 1 )</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token comment\">//eat</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">//think</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>若全部哲學家同時舉起他們的同一手，那他們永遠無法拿到另外一手的筷子最後就卡死，所以我們修改一下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>monitor DiningPhilosopheres<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">enum</span><span class=\"token punctuation\">&#123;</span>THINKING<span class=\"token punctuation\">,</span>HUNGRY<span class=\"token punctuation\">,</span>EATING<span class=\"token punctuation\">&#125;</span> state<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  condition self<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">pickup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    state<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>HUNGRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>EATING<span class=\"token punctuation\">)</span> self<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">putdown</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    state<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>THINKING<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">test</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>EATING<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>EATING<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>HUNGRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      state<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>EATING<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      self<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">initialization_code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      state<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>THINKING<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>哲學家甚麼時候可以舉起筷子呢？他餓的時候，光餓的時候還不行，他必須先檢查左邊右邊有沒有在吃，如果沒有他就可以把狀態改成 EATING，吃飽之後要放下筷子把狀態改成 THINKING 然後換自己左邊和右邊的，這樣的架構雖然不會造成 deadlock (剛剛說的卡死) 但可能會有人餓死，若某個哲學家一直吃都不放筷子的話他左右的人就很可憐</p>\n<h3 id=\"os-support\"><a class=\"anchor\" href=\"#os-support\">#</a> OS support</h3>\n<p>大部分的作業系統都有提供一些支原來實現 synchronization ，我們來看一些例子</p>\n<ul>\n<li><strong>spin-lock</strong> 最早是在 Solaris 這個作業系統被提出，運用 adaptive mutexes 的觀念，意思是說，如果 lock 被一個 thread 持有，且這個 thread 正在使用 CPU 那我就等待這個 lock，如果持有 lock 的 thread 沒有在被執行，那我就先去睡了吧別等了，在 Windows 上，持有 spinlock 的 thread 不會被 preemptive</li>\n<li><strong>readers-writers locks</strong> 用在 readers writers problem ，在 Solaries 中會使用 turnstiles 來安排想要獲取 lock 的 thread</li>\n<li><strong>dispatch objects</strong></li>\n</ul>\n<h3 id=\"非-os-support\"><a class=\"anchor\" href=\"#非-os-support\">#</a> 非 OS support</h3>\n<p>也有一些方法是藉由其他東西來實現 synchronization，像是 transactional memory (由 memory 確保某些資料是 automically 的) 或是 open MP (展開聚集)、Functional Programming Languages</p>\n<p>以上就是 Synchronization 的更多實例，祝大家閱讀愉快</p>\n",
            "tags": [
                "OS",
                "Synchronization"
            ]
        },
        {
            "id": "https://lu1hoao.github.io/2022/04/28/os/os-4/",
            "url": "https://lu1hoao.github.io/2022/04/28/os/os-4/",
            "title": "Synchronization Tools (下)",
            "date_published": "2022-04-28T12:23:28.000Z",
            "content_html": "<h3 id=\"概要\"><a class=\"anchor\" href=\"#概要\">#</a> 概要</h3>\n<p>上一篇文章講述了實現同步的幾個演算法，核心觀念就是確保一次只有個 process 或 thread 在修改共同變數，但是 hardware-based solutions 比較難被撰寫高階語言的程式設計師使用，所以作業系統提供了 Mutex Locks、Semaphore、Monitors 這些工具，本文主要介紹這三種解法</p>\n<h3 id=\"mutex-locks\"><a class=\"anchor\" href=\"#mutex-locks\">#</a> Mutex Locks</h3>\n<p>所謂的 Mutex Locks 就像是作業系統提供了一把鑰匙給所有要存去共同變數的 process ，誰搶到鑰匙誰就有權修改，修改完之後也要把鑰匙還回來，想拿鑰匙必須呼叫 acquire (), 還鑰匙必須呼叫 release ()，而這兩個函式在執行時都是不可被中斷的，結構如下</p>\n<ol>\n<li>acquire lock</li>\n<li>critical section</li>\n<li>release lock</li>\n<li>remainder section</li>\n</ol>\n<p>以程式碼來看</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>available<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> available<span class=\"token operator\">=</span>false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> available<span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然而這樣會造成 <strong>busy waiting</strong>，在 <code>while(!available);</code>  中，是不斷地邊等待邊檢查，因為會造成這樣的現象，我們也把這種 lock 稱為 spinlock。另外 available 這個變數只有 0 和 1 兩個值，這是一種簡單的工具</p>\n<h3 id=\"semaphore\"><a class=\"anchor\" href=\"#semaphore\">#</a> Semaphore</h3>\n<p>semaphore 是一個整數變數，剛剛我們想要取得鑰匙必須使用 acquire，還鑰匙則是 release，在 Semaphore 中則是使用 wait and signal</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>S<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> S<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  S<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Semaphore 有 counting semaphore 和 binary semaphore，後者和 mutex 相同，前者則是整數型態，整數型態有一個好處，可以明確表示資源的數量，畢竟同步問題不只發生在修改共同變數，也可以是搶奪有限資源，舉例來說，今天要去停車場停車，發現停車場外面只寫了現在有空位或無空位就是 mutex，但如果寫剩於幾位就是 semaphore，semaphore 有可能小於 0 嗎？不可能<br />\n雖然執行 seamphore 大部分都是讓 semaphore 或 mutex 初值大於 0 ，但某先情況下我們可以修改初值讓 process 依照一定的次序執行<br />\n舉例來說 process 1 執行</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>S1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>synch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//synch+1</span></pre></td></tr></table></figure><p>process 2 執行</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>synch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>S2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>這樣情況下 process 就會依照 process 1 先執行，再換 process 2 執行的次序<br />\n然而 semaphore 也會有 busy waiting 的問題，為甚麼 busy waiting 不好呢？因為在執行 wait () 函數時是不會被 context switch 的，等待太久就會浪費 CPU 時間。</p>\n<h3 id=\"semaphore-implementation-with-no-busy-waiting\"><a class=\"anchor\" href=\"#semaphore-implementation-with-no-busy-waiting\">#</a> Semaphore Implementation with no Busy waiting</h3>\n<p>為了解決上面提到的問題，發展出沒有 busy waiting 的 semaphore，方法就是創立一個屬於 semaphore 的 queue，當 process 發現自己無法執行時就進到 queue 等待 ( <strong>block</strong> ) ，執行完的 process 則會去 queue 呼叫下一個可以執行的 process ( <strong>wake up</strong> )，此時 semaphore 也不再是一個普通的整數了，他變成這樣</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">process</span> <span class=\"token operator\">*</span>list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span>semaphore<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>而這個時候 value 值就有可能為負了，負表示有 process 在等待，而數字表示有幾個 process 在等待<br />\n原本的 wait () 和 signal () 函數則變成這樣</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>semaphore <span class=\"token operator\">*</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> S<span class=\"token operator\">-></span> value<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S<span class=\"token operator\">-></span>value<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  add this process to S<span class=\"token operator\">-></span>list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>semaphore <span class=\"token operator\">*</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> S<span class=\"token operator\">-></span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S<span class=\"token operator\">-></span>VALUE<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  remove a process P from S<span class=\"token operator\">-></span>list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">wakeup</span><span class=\"token punctuation\">(</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>當我們沒寫好程式時系統可能會造成 deadlock，就是大家都卡住無法執行，下面這個情況就可能會造成 deadlock<br />\n 假設有 prosess p0 執行以下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>peocess p1 執行以下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>那麼對 p0 和 p1 而言，他們都拿不到他們想要的也都無法執行，就會造成系統卡住<br />\n如果在 semapgore queue 中安排不好，也可能會造成 starvation 。<br />\n另外有個名詞稱作 <strong>Priotity Inversion</strong>，假設有一個高優先權的 process invoke 低優先權的 process 去拿取一個現在被中優先權掌握的資源，此時低優先權就會繼承高優先權的權力，順利從中優先權的 process 中搶過資源</p>\n<h3 id=\"monitors\"><a class=\"anchor\" href=\"#monitors\">#</a> Monitors</h3>\n<p>Monitor 是一種資料型態，可以把他想成一個區域，進到這個區域之前要先排隊，進來之後也不是立刻執行喔，monitor 裡面的多個 process 只有一個能執行，在高階語言中我們使用這個架構，complier 會幫我們以 semaphores 的方式實作，monitor 大概長這樣</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>monitor monitor<span class=\"token operator\">-</span>name<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//shared variable declarations</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> procesdure <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> procedure  <span class=\"token function\">pn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> initialization <span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 monitor 的變數只有在 monitor 的 process 可以使用，在  monitor 的多個 process 只有一個可以執行，所以我們會使用 condition variable 來表示這些 process 的狀態，一般使用  <code>x.wait()</code>  表示我在 monitor 中但我在等待， <code>x.signal()</code>  則表示我在 monitor 中且我要執行，<br />\n為甚麼 x.signal () 示我要執行而不是我在執行呢？<br />\n那是因為 monitor 通常有兩種寫法，一種是當 a process  <code>x.signal() </code> 時，b process 立刻進入  <code>x.wait()</code> ，一種則是 a process x.signal () 但 CPU 沒有立刻執行 a process ，而是等到 b process 結束或離開 monitor 才執行，障兩種方式個又各地優缺點，端看 complier 如何實作</p>\n<h3 id=\"monitor-implementation-using-semaphores\"><a class=\"anchor\" href=\"#monitor-implementation-using-semaphores\">#</a> Monitor Implementation Using Semaphores</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//variables</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>semaphore mutex<span class=\"token punctuation\">;</span><span class=\"token comment\">//(initially=1)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>semaphore next<span class=\"token punctuation\">;</span><span class=\"token comment\">//(initially=0)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> next_count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>next_count<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>next_count 是表示有多少 process 在等待。當沒 process 等待時就把 mutex 設為 1 ， 表示大家都可以去爭奪那把鑰匙，有 process 在等待時，則呼叫等待隊伍中的下一個，至於要呼叫等待隊伍中的哪一個 process 就端看這個排序系統是使用 FCFS 或 Priority 等等，不同系統就會有不同設計</p>\n<p>以上就是 mutex、semaphores、monitors 的小科普，祝大家閱讀愉快</p>\n",
            "tags": [
                "OS",
                "Synchronization"
            ]
        },
        {
            "id": "https://lu1hoao.github.io/2022/04/27/os/os-3/",
            "url": "https://lu1hoao.github.io/2022/04/27/os/os-3/",
            "title": "Synchronization Tools (上)",
            "date_published": "2022-04-27T12:23:28.000Z",
            "content_html": "<h3 id=\"概要\"><a class=\"anchor\" href=\"#概要\">#</a> 概要</h3>\n<p>本文主要講述 Synchronization tools ，中文稱為同步，電腦中如果有兩個以上的 process 要存取同一個變數 (改變他的值) 我們必須確保這些變化是同步的不然就會造成同一個變數在不同 process 中有不同的值，本文主在討論<strong>確保他們是同步</strong>的這個過程</p>\n<h3 id=\"問題起源\"><a class=\"anchor\" href=\"#問題起源\">#</a> 問題起源</h3>\n<p>首先我們先來看下面這個情況，假設有兩個 process 互為 consumer 和 prodeucer 的關係，producer 完成一個任務後會把它放到 buffer ，consumer 則是會從 buffer 拿走任務，這時候就需要一個 counter 來記錄 buffer 內的任務數目，如果 counter 太小，就要叫 producer 做快一點，或者叫 consumer 拿慢一點，反之若 counter 太大，就要叫 producer 慢一點或 consumer 快一點，所以對 producer 來說他有以下程式碼</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>counter<span class=\"token operator\">==</span>BUFFER_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  buffer<span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>next_produced<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  in<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>in<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>BUFFER_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>為甚麼要  <code>%BUFFER_SIZE</code>  呢？這是因為 buffer 的大小通常是有限的，後面放完又會從最前面開始放<br />\n對 consumer 來說他則有以下程式碼</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>counter<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  next_consumed<span class=\"token operator\">=</span>buffer<span class=\"token punctuation\">[</span>out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  out<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>out<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>BUFFER_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  counter<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>看起來非常合理，然而在 C 語言中， <code>counter++</code>   <code>counter--</code>  這樣一行程式碼，在組合語言中卻是三行</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>register1<span class=\"token operator\">=</span>counter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>register1<span class=\"token operator\">=</span>register1<span class=\"token operator\">+</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>counter<span class=\"token operator\">=</span>register1</pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>register2<span class=\"token operator\">=</span>counter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>register2<span class=\"token operator\">=</span>register2<span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>counter<span class=\"token operator\">=</span>register2</pre></td></tr></table></figure><p>如果這三行沒有一口氣做完，而是做到一半就被 context switch ，那 counter 的值就不會被更新，為了解決這個問題，我們訂了 Critical section problem，對每一個 process 都有一段 code 表示 critical srction , 一旦這個 process 進到 critical section 就代表只有他能夠更改共同變數，其他人不可以更改！進到 critical section 要確認別人不在 critical section ，離開時也要把門打開讓別人可以進來，因此可以用下面程式碼範例簡單說明</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  entrysection</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    critical section</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  exitsection</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    remainder section <span class=\"token comment\">/* 非 critical section*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"解法-petersons-solution\"><a class=\"anchor\" href=\"#解法-petersons-solution\">#</a> 解法 Peterson's Solution</h3>\n<p>一個正確的 critical section problem 解法，應該滿足以下三項</p>\n<ol>\n<li><strong>Mutual Exclusion</strong> ，互斥性，當我在 critical section 的時候別人都不能進</li>\n<li><strong>Progress</strong> ，運行順暢，大家都能很自由順利的進入 critical section 不會卡住</li>\n<li><strong>Bounded Waiting</strong>，等待時間短，避免有人輪不到</li>\n</ol>\n<p>Peterson's Solution 是這個問題的軟體解法，用以下程式說明</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  turn<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>turn<span class=\"token operator\">==</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  critical section</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  remainder section    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>假設現在輪到 process i，他想進去 critical section ，所以他就把自己的 flag 設為 1，但 critical section 不是他想進去就能進去的，必需沒有人在裡面，甚麼情況是有人在裡面？就是  <code>flag[j]==1</code>  而且現在是 turn j (也就是說現在是輪到 process j)，那如果  <code>flag[j]!=1 </code>  但 turn j 代表甚麼呢？代表 process j 可能已經死了，他無法自己拿起 flag 設為 1 ，那 turn i ， <code>flag[j]==1</code>  ，代表雖然 process j 想進現在卻不是他的 turn ，他必須等到他的 turn 才能改，換句話說這是一個雙重確認的機制，有 flag 和 turn 兩個機制確保運作流暢，如果只保留這兩個中的其中一個，那上面提到三項標準的後兩項是無法滿足的</p>\n<h3 id=\"synchronization-hardware\"><a class=\"anchor\" href=\"#synchronization-hardware\">#</a> Synchronization Hardware</h3>\n<p>有軟體解法也有硬體解法，而這兩種解法的觀念都圍繞著一個核心就是 locking ，我把自己鎖起來，沒人可以打斷我，因此硬體指令就是提供 atomic (non-interruptible)，我們用比較高階的語言來理解這些機器指令的原理，然而這其實是微指令<br />\n<strong> test_and_set Instructuon</strong><br />\n (有共用的變數 lock，假設初始值是 FALSE，表示沒有其他 process 被 lock)</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>boolean <span class=\"token function\">test_and_set</span><span class=\"token punctuation\">(</span>boolean <span class=\"token operator\">*</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  boolean rv<span class=\"token operator\">=</span><span class=\"token operator\">*</span>target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">*</span>target<span class=\"token operator\">=</span>TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> rv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">test_and_set</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  critical section </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  lock<span class=\"token operator\">=</span>false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>lock 就像軟體解法中的 turn ，而修改 target 的值就像軟體中把自己的 flag 設為 1 ，這個做法很厲害幾乎是現在通用的作法，不過這其實是 IBM 的專利，所以其他公司後來發展出 <strong>compare_and_swap Instruction</strong> 但觀念是一樣的只是寫起來比較複雜</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">compare_and_swqp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>value<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> expected<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> new_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span><span class=\"token operator\">*</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>value<span class=\"token operator\">==</span>expected<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">*</span>value<span class=\"token operator\">=</span>new_value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">compare_and_swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lock<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  critical section</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  lock<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  remainder section</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上就是實現 Synchronization 的方法，祝大家閱讀愉快</p>\n",
            "tags": [
                "OS",
                "Synchronization"
            ]
        }
    ]
}