<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Lu Ying • Posts by &#34;disk&#34; tag</title>
        <link>https://lu1hoao.github.io</link>
        <description></description>
        <language>en</language>
        <pubDate>Mon, 06 Jun 2022 22:23:28 +0800</pubDate>
        <lastBuildDate>Mon, 06 Jun 2022 22:23:28 +0800</lastBuildDate>
        <category>C</category>
        <category>permutation</category>
        <category>combination</category>
        <category>sort</category>
        <category>OS</category>
        <category>Memory</category>
        <category>scheduling</category>
        <category>Disk</category>
        <category>Synchronization</category>
        <category>Deadlock</category>
        <category>程式新手</category>
        <category>Visual studio 2022</category>
        <category>VS Code</category>
        <category>WSL</category>
        <category>debug</category>
        <item>
            <guid isPermalink="true">https://lu1hoao.github.io/2022/06/06/os/os-13/</guid>
            <title>Mass Storage System</title>
            <link>https://lu1hoao.github.io/2022/06/06/os/os-13/</link>
            <category>OS</category>
            <category>Disk</category>
            <pubDate>Mon, 06 Jun 2022 22:23:28 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;概要&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概要&#34;&gt;#&lt;/a&gt; 概要&lt;/h3&gt;
&lt;p&gt;大容量儲存系統一般指的是 disk ，本文主要介紹 disk 的架構、連接 (attachment)、排程、管理，也講述 RAID 的基本知識。&lt;/p&gt;
&lt;h3 id=&#34;overview&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#overview&#34;&gt;#&lt;/a&gt; Overview&lt;/h3&gt;
&lt;p&gt;當我們提及硬碟 (HHD) 就會提到他的存取速度，硬碟存取速度由&lt;br /&gt;
硬碟旋轉到所需位置以及指針移動的時間有關，前者稱為 seek time，後者是 rotation lantency，兩者合稱 Positioning time，通常是微秒等級，disk 和電腦的連接則通常透過 I/O bus，在電腦端會有 Host controller 負責和 disk controller 溝通&lt;br /&gt;
 SSD 則是支援隨機存取的 disk ，但通常有固定的寫入次數，因此 SSD controler 要讓每個地方的讀取平均避免壞掉。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/R5zSz80.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;disk-structure&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#disk-structure&#34;&gt;#&lt;/a&gt; Disk Structure&lt;/h3&gt;
&lt;p&gt;disk 的基本讀取單位是 logical block，資料會被分成多個 block 然後對應到相應的 sector 中，因此當資料放在近一點的位置，他們的存取速度也會比較快。很多個 disk 合在一起可以形成 disk array ，比如跨國企業的資料可以存放在 disk array 再透過 switch、routing 技術連結到 severr，現在也發展出 Network-Attached Storage ，讓個人存放在 disk array 的資料也可以透過網路連接到筆電、平版等各種裝置 。&lt;/p&gt;
&lt;h3 id=&#34;disk-scheduling&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#disk-scheduling&#34;&gt;#&lt;/a&gt; Disk Scheduling&lt;/h3&gt;
&lt;p&gt;作業系統有責任確保硬體的存取效率，對 disk 而言那意味著作業系統要有一套好的排程系統使得 seek time 最短，而 seek time 又和 seek distance 直接相關，因此衍生出以下幾種排程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FCFS&lt;br /&gt;
 假設現在指標在 sector 53，而需要存取的資訊分別在 98、183、37、122、14、124、65、67，FCFS 顧名思義就是先來的先處理，別管甚麼距離最佳化了，這樣做的好處在於當資料之間有因果關係時，依然能保持他們的次序而不會出錯，執行過程如下圖，總距離是 640 cylinder&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/adIyUhK.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSTF&lt;br /&gt;
 距離最短的先取得，但這個過程會破壞原本的次序，依照上面的例子，總距離是 236 cylinder，執行過程如下圖&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/L4CA8zZ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SCAN&lt;br /&gt;
scan 的中文稱作掃描，意思即從頭到尾走一遍遇到所需的資料就執行動作，當資料很分散時這樣的做法就很好，以下是 scan 的執行過程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/YavSUMx.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C-SCAN&lt;br /&gt;
 一種改良版 scan，當從最後一個位置跑到第一個位置時 (或相反) 可以對走過的路徑加速，執行過程如下&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/yB9eUnP.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C-LOOK&lt;br /&gt;
 改良版 C-SCAN ，不只對走過的路徑加速，也優先判斷所需資料中的最大與最小編號，比最小編號小或比最大編號大的位置就不走訪。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/Pu4xdX1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;disk-management&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#disk-management&#34;&gt;#&lt;/a&gt; Disk Management&lt;/h3&gt;
&lt;p&gt;low-level formatting or formatting 中文稱作格式化，會把 disk 分成很多個 sector，由 disk controller 以 sector 為單位的管理，而 OS 為了管理 disk 也會在 disk 中擁有自己的 data structure ，假如我們想在自己的筆電上弄個 D 槽出來就可以透過格式化達成，但筆電出廠時通常已經灌好作業系統，所以除非把作業系統卸載之後再自己裝否則還是無法格式化。&lt;br /&gt;
開機程式存於 ROM 而 Bootstrap loader program 則存在 disk 中的 boots blocks。另外 sector 也要有辦法處理 bad block&lt;br /&gt;
 在虛擬記憶體中我們說過 disk 中會有 proess 的 image ，當 process 被啟用時，時間 swap ，而不必透過檔案系統，存放這些 image 的地方就稱為 swap space ，通常包含程式的 code、text segment，而 kernel 則是透過 swap maps 去追蹤 swap space 的使用情形，如果 swap space 用完了，大部分系統會出現警告。&lt;/p&gt;
&lt;h3 id=&#34;raid-structure&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raid-structure&#34;&gt;#&lt;/a&gt; RAID Structure&lt;/h3&gt;
&lt;p&gt;RAID 的中文稱作磁碟陣列，在 RAID 尚未被發明之前，都是以單台硬碟作為使用，當第一台硬碟滿後必須加裝第二、三台，在各台硬碟間來回切換非常不方便，RAID 的核心架構就是虛擬架構，透過多台硬碟合成一台虛擬硬碟，而 RAID 也背負著其他要求，像是自動偵測故障硬碟、備份等等。我們通常會用 men time to failure (mttf)、mean time to repair、mean time to data loss 來評估 RAID 的效能， Raid 的資本單位是 disk striping，又可以分成六級&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RAID 0 一般的 RAID，NO COPY、NO PARITY (錯誤容忍)&lt;/li&gt;
&lt;li&gt;RAID mirrired disks，RAID 1 的每一個 disk 都有一份 copy 作為備份&lt;/li&gt;
&lt;li&gt;RAID 2、3、4 現在都很少用&lt;/li&gt;
&lt;li&gt;RAID 5、6 則是分散 parity，容許故障。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Arrael Level&lt;/th&gt;
&lt;th&gt;RAID 0&lt;/th&gt;
&lt;th&gt;RAID 1&lt;/th&gt;
&lt;th&gt;RAID 5&lt;/th&gt;
&lt;th&gt;RAID5+Spare&lt;/th&gt;
&lt;th&gt;RAID 6+Spare&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Fault Tolerance&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;td&gt;容許一台故障&lt;/td&gt;
&lt;td&gt;容許一台故障&lt;/td&gt;
&lt;td&gt;容許兩台故障 (非同步)&lt;/td&gt;
&lt;td&gt;容許兩台故障 (非同步)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;硬碟台數&lt;/td&gt;
&lt;td&gt;2 (以上)&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3 (以上)&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Array Size&lt;/td&gt;
&lt;td&gt;N-1&lt;/td&gt;
&lt;td&gt;N/2&lt;/td&gt;
&lt;td&gt;N-1&lt;/td&gt;
&lt;td&gt;N-2&lt;/td&gt;
&lt;td&gt;N-3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;適用對象&lt;/td&gt;
&lt;td&gt;風險高 NO&lt;/td&gt;
&lt;td&gt;個人&lt;/td&gt;
&lt;td&gt;企業&lt;/td&gt;
&lt;td&gt;企業&lt;/td&gt;
&lt;td&gt;企業&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;結語&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#結語&#34;&gt;#&lt;/a&gt; 結語&lt;/h3&gt;
&lt;p&gt;disk 的應用與硬體的架構較相關，隨著硬體技術的進步、disk 容量可以越來越大、價格可以越來越便宜，在 stable sorage 中，要確保資料穩定儲存，就是排除錯誤，一旦發現可能產生的錯誤就不更改 sector 內容，總而言之這章在 OS 中並沒有占很大篇幅，技術細節也應該是電機 (？) 領域，祝大家閱讀愉快。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
