<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Lu Ying • Posts by &#34;vs code&#34; tag</title>
        <link>https://lu1hoao.github.io</link>
        <description></description>
        <language>en</language>
        <pubDate>Fri, 22 Apr 2022 20:23:28 +0800</pubDate>
        <lastBuildDate>Fri, 22 Apr 2022 20:23:28 +0800</lastBuildDate>
        <category>C</category>
        <category>combination</category>
        <category>permutation</category>
        <category>OS</category>
        <category>Memory</category>
        <category>scheduling</category>
        <category>Disk</category>
        <category>sort</category>
        <category>Synchronization</category>
        <category>Deadlock</category>
        <category>程式新手</category>
        <category>Visual studio 2022</category>
        <category>debug</category>
        <category>VS Code</category>
        <category>WSL</category>
        <item>
            <guid isPermalink="true">https://lu1hoao.github.io/2022/04/22/%E7%A8%8B%E5%BC%8F%E5%B0%8F%E7%99%BD/program-lesson-3/</guid>
            <title>Debug C 語言的方法</title>
            <link>https://lu1hoao.github.io/2022/04/22/%E7%A8%8B%E5%BC%8F%E5%B0%8F%E7%99%BD/program-lesson-3/</link>
            <category>程式新手</category>
            <category>debug</category>
            <category>VS Code</category>
            <pubDate>Fri, 22 Apr 2022 20:23:28 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;概要&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概要&#34;&gt;#&lt;/a&gt; 概要&lt;/h3&gt;
&lt;p&gt;寫程式中很重要的一步是偵錯 (debug)，這是當我們的程式無法得出我們想要的結果時，必須進行的一步，而寫程式常見的錯誤大概可以分成四種，本文主要介紹如何在 VS Code 執行 debug 模式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、文法錯誤&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;這種比較常發生在新手，像是縮排、變數名稱、符號等等，但這種錯誤編譯器會幫我們抓出來，在編譯的時候出現報錯，如果看不懂報錯可以直接複製貼上搜尋，常見的編譯器錯誤與警告也會在另一篇文章教學&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、超過時間限制：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果想要打競程或特別鑽研某項演算法時，會發現 TLE 是個致命傷，照著正常邏輯想時間總會不夠用，這種時候只能從演算法起手或是修改使用的資料結構，屬於比較困難的錯誤&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、超過空間限制：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;這點和上一點類似，就是空間超過限制，通常出現在比競程或是演算法題目，比較需要注意的還有 overflow 、 stack overflow 、存取超過陣列的宣告範圍等等，也是比較困難的錯誤&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、邏輯錯誤&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;這種是我們解題的想法不對，可能考慮不夠周全以至於特殊情況沒考慮到，或是看錯題目，這時候就可以用幾項常見的 debug 方法幫助我們找到錯誤的地方，也是本篇文章主要討論的內容。&lt;/p&gt;
&lt;h3 id=&#34;小鴨鴨-debug-法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小鴨鴨-debug-法&#34;&gt;#&lt;/a&gt; 小鴨鴨 debug 法&lt;/h3&gt;
&lt;p&gt;小鴨鴨 debug 法是指在桌上放一隻玩具小鴨鴨，然後對著小鴨鴨一行一行解釋 code ，告訴小鴨鴨這行程式碼在執行什麼程序，預計會得出什麼結果，藉由這個過程去重新檢視自己的邏輯，順帶一題我的小鴨鴨是小綠藻喔 (&lt;s&gt;我知道這個方法看起來有點白癡&lt;/s&gt;但真的有) 小鴨鴨 debug 法的進階版就是把自己當成電腦，拿一張空白紙依序寫下程式執行到這步變數應該會是什麼值，自己想過一遍效果總是比較好！&lt;/p&gt;
&lt;h3 id=&#34;中途輸出法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中途輸出法&#34;&gt;#&lt;/a&gt; 中途輸出法&lt;/h3&gt;
&lt;p&gt;中途輸出法就是在程式中間加上輸出指令，把變數輸出以觀察變數的變化 (以 C 語言為例，就是每隔一小段使用 printf) 這種方法比較常用在&lt;strong&gt;我們大概已經知道是哪個變數在搞鬼&lt;/strong&gt;輸出每個階段的結果也可以幫助我們理解一個演算法的運作，像是在遞迴函數中加入輸出指令可以幫助我們理解函數是如何彼此呼叫又 return 的&lt;/p&gt;
&lt;h3 id=&#34;不講科學講神學&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不講科學講神學&#34;&gt;#&lt;/a&gt; 不講科學講神學&lt;/h3&gt;
&lt;p&gt;重新整理、重新開機、關掉軟體再重開起屬於這一類，通常是在求助無門時啟用，有時意外的好用，電腦就是這麼神奇 (就和機台放綠色乖乖一樣)&lt;/p&gt;
&lt;h3 id=&#34;vs-code-的-debug-模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vs-code-的-debug-模式&#34;&gt;#&lt;/a&gt; VS Code 的 debug 模式&lt;/h3&gt;
&lt;p&gt;終於要進入主題了，VS Code 提供了一個可以 debug 的模式 (其實大部分的編輯器都有喔)，以下就是教學&lt;/p&gt;
&lt;p&gt;首先我們要確定自己有裝 gdb (在上一篇教學中有教到)，確認的話可以在終端機打上 &lt;code&gt;whereis gdb&lt;/code&gt;  如果有顯示出  &lt;code&gt;/usr/bin/gdb&lt;/code&gt;  就代表有安裝喔，表示 gdb 可執行檔在裡面，如果沒有的話在 Ubuntu 打上 &lt;code&gt;sudo install gdb&lt;/code&gt; &lt;br /&gt;
 接著在 VS Code 延伸模組中搜尋 C&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/WEhmz5l.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;選取這個套件並安裝，安裝完成後先看看是否確實安裝&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/Z4vGt2t.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;把最上方右邊那個列表關掉就可以看到現在安裝了那些延伸模組，點選設定 &amp;gt; 新增至工作區建議，這時候會看到原本的工作區多了 .vscode 的檔案，裡面有三個 .json 檔&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/0Z1dHyQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接著選取想要執行的檔案，設定中斷點 (在行數前面按一下會出現紅色點點，這是程式開始的點) 然後按下執行 &amp;gt; 啟動偵錯&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/clUbh7P.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;一直選取第一個檔案&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/vODxbXZ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/gQCdGk2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然後選取不進入函式 (一直按一直按)，就可以在左方視窗看到變數的值喔&lt;br /&gt;
&lt;img data-src=&#34;https://i.imgur.com/FCuIGQl.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;這樣就完成了，新手可以藉由這個方式來理解  &lt;code&gt;i++&lt;/code&gt;  與  &lt;code&gt;++i&lt;/code&gt;  的差別喔，其實 debug 模式有很多使用方法，可以設定不同條件的中斷點，會用的話真的很好用，不過我覺得寫程式需要心態調整，有時候寫不出來，做點別的事再回來就想出來了，如果一直 debug 不出來也不要灰心，休息一下再繼續，祝各位小白寫扣順利！&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://lu1hoao.github.io/2022/04/18/%E7%A8%8B%E5%BC%8F%E5%B0%8F%E7%99%BD/program-lesson-2/</guid>
            <title>環境建置--VS Code + WSL</title>
            <link>https://lu1hoao.github.io/2022/04/18/%E7%A8%8B%E5%BC%8F%E5%B0%8F%E7%99%BD/program-lesson-2/</link>
            <category>程式新手</category>
            <category>VS Code</category>
            <category>WSL</category>
            <pubDate>Mon, 18 Apr 2022 16:42:28 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;概要&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概要&#34;&gt;#&lt;/a&gt; 概要&lt;/h3&gt;
&lt;p&gt;本篇文章會介紹使用 VS Code 搭配 WSL 的方式來建置寫程式環境，我覺得這個過程對於剛進到程式領域的人來說會學到很多，但安裝起來步驟比較繁瑣，過程中可能也會碰到一些問題，如果想要比較輕鬆的建立環境可以參考另一篇 Visual Studuio 2022 喔！選擇 WSL 的原因是因為它可以在 Windows 模擬 Linux，我們可以在 Ubuntu 輸入基本的 Linux 指令，也可以使用 vim 寫程式。&lt;/p&gt;
&lt;h3 id=&#34;vs-code&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vs-code&#34;&gt;#&lt;/a&gt; VS Code&lt;/h3&gt;
&lt;p&gt;搜尋 VS Code ，點進以下網頁，依照自己的電腦規格安裝&lt;br /&gt;
&lt;img data-src=&#34;https://i.imgur.com/QPB4WjG.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;等待安裝的過程中先在自己的電腦建立資料夾，這個資料夾是要放之後所寫的程式的，我自己是用語言分類。以我為例我就是在文件當中建立 c 語言的資料夾&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/MnDrSCy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;安裝進行到最後一步建議勾選&lt;strong&gt;建立桌面圖示&lt;/strong&gt;，這樣 VS Code 就會出在桌面，提醒我們一打開電腦就要工作。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/VnG2Orf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;VS Code 的側邊欄有很多功能，第四個有一隻蟲蟲是 debug ，安裝延伸模組就可以啟用，透過設定中斷點的方式觀察變數的變化，之後在 debug 文章會介紹，第五個則是延伸模組。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/dSmkfti.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;wsl-ubuntu&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wsl-ubuntu&#34;&gt;#&lt;/a&gt; WSL-Ubuntu&lt;/h3&gt;
&lt;p&gt;第一步先從電腦的設定 &amp;gt; 應用程式 &amp;gt; 選用功能 &amp;gt; 更多 Windows 功能把&lt;strong&gt;虛擬機器平&lt;/strong&gt;台勾選起來&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/tJeTRB1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然後在商店搜尋 Windows Subsystem 選取企鵝圖示，開使安裝。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/gPK52Wn.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;完成後接著在商店搜尋 Ubuntu 選擇評分高或安裝次數多的版本，開始安裝&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/Jm5SBDk.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;安裝完成後開啟 Ubuntu ，輸入&lt;br /&gt;
 &lt;code&gt;sudo apt update&lt;/code&gt; &lt;br /&gt;
 接著&lt;br /&gt;
 &lt;code&gt;sudo apt upgrade &lt;/code&gt; &lt;br /&gt;
sudo 是一種應用程式，可以讓使用者在安全情況下執行特權指令，初次輸入的時候需要設定使用者名稱和密碼，之後每次使用都要輸入使用者密碼喔！ &lt;code&gt;apt update&lt;/code&gt;  和 &lt;code&gt;apt upgrade&lt;/code&gt;  都是軟體更新的指令。&lt;br /&gt;
最後來安裝 gcc 編譯器，在 Ubuntu 輸入&lt;br /&gt;
 &lt;code&gt;sudo apt install gcc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果要編譯 c++ 則輸入&lt;br /&gt;
 &lt;code&gt;sudo apt install g++&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最後安裝&lt;br /&gt;
 &lt;code&gt;sudo apt install gdb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;gdb 是幫助我們 debug 的之後會教到&lt;/p&gt;
&lt;h3 id=&#34;再次開啟-vs-code&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#再次開啟-vs-code&#34;&gt;#&lt;/a&gt; 再次開啟 VS Code&lt;/h3&gt;
&lt;p&gt;到此部分就真的是最後一步了，打開 VS Code ，選取側邊欄第五個 (延伸模組) 搜尋 WSL ，開始安裝&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/GwsijKB.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;確認左下方綠色框框顯示與 WSL 連線&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/E06CziD.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然後點選檔案 &amp;gt; 開啟資料夾 (選則我們第一步建立的資料夾) &amp;gt; 新增檔案 &amp;gt; 寫 Hello&lt;br /&gt;
 寫好之後，存檔，從下方拉出終端機，輸入&lt;br /&gt;
 &lt;code&gt;gcc hello.c &lt;/code&gt; &lt;br /&gt;
hello 是檔名視檔案不同而有所改變，編譯後若沒有出現錯誤訊息就輸入&lt;br /&gt;
 &lt;code&gt;./a.out&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgur.com/J1ca6ZG.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;a.out 是編譯後的預設檔名，如果想要改變檔名可以在上一步改成&lt;br /&gt;
 &lt;code&gt;gcc -o hello hello.c&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接著就是 &lt;code&gt;./hello&lt;/code&gt;  而不是  &lt;code&gt;./a.out&lt;/code&gt;  了喔！&lt;/p&gt;
&lt;p&gt;如此大功告成！祝各位小白安裝順利&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
